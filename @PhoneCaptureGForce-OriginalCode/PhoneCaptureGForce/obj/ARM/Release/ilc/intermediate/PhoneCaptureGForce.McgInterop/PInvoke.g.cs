#define MCG_WINRT_SUPPORTED
using Mcg.System;
using System;
using System.Collections.Generic;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Runtime.InteropServices.WindowsRuntime;


// -----------------------------------------------------------------------------------------------------------
// 
// WARNING: THIS SOURCE FILE IS FOR 32-BIT BUILDS ONLY!
// 
// MCG GENERATED CODE
// 
// This C# source file is generated by MCG and is added into the application at compile time to support interop features.
// 
// It has three primary components:
// 
// 1. Public type definitions with interop implementation used by this application including WinRT & COM data structures and P/Invokes.
// 
// 2. The 'McgInterop' class containing marshaling code that acts as a bridge from managed code to native code.
// 
// 3. The 'McgNative' class containing marshaling code and native type definitions that call into native code and are called by native code.
// 
// -----------------------------------------------------------------------------------------------------------
// 
// warning CS0067: The event 'event' is never used
#pragma warning disable 67
// warning CS0169: The field 'field' is never used
#pragma warning disable 169
// warning CS0649: Field 'field' is never assigned to, and will always have its default value 0
#pragma warning disable 414
// warning CS0414: The private field 'field' is assigned but its value is never used
#pragma warning disable 649
// warning CS1591: Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// warning CS0108 'member1' hides inherited member 'member2'. Use the new keyword if hiding was intended.
#pragma warning disable 108
// warning CS0114 'member1' hides inherited member 'member2'.  To make the current method override that implementation, add the override keyword. Otherwise add the new keyword.
#pragma warning disable 114
// warning CS0659 'type' overrides Object.Equals but does not override GetHashCode.
#pragma warning disable 659
// warning CS0465 Introducing a 'Finalize' method can interfere with destructor invocation. Did you intend to declare a destructor?
#pragma warning disable 465
// warning CS0028 'function declaration' has the wrong signature to be an entry point
#pragma warning disable 28
// warning CS0162 Unreachable code Detected
#pragma warning disable 162
// warning CS0628 new protected member declared in sealed class
#pragma warning disable 628

namespace McgInterop
{
	/// <summary>
	/// P/Invoke class for module 'BCrypt'
	/// </summary>
	public unsafe static partial class BCrypt
	{
		// Signature, BCryptEnumAlgorithms, [fwd] [return] [Mcg.CodeGen.BlittableStructMarshaller] PInvoke_NTSTATUS__PInvoke_Windows_Core__PInvoke__NTSTATUS__PInvoke_Windows_Core, [fwd] [in] [Mcg.CodeGen.EnumMarshaller] PInvoke_BCrypt_AlgorithmOperations__PInvoke_BCrypt__BCrypt_AlgorithmOperations__PInvoke_BCrypt, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableValueMarshaller] PInvoke_BCrypt_BCRYPT_ALGORITHM_IDENTIFIER__PInvoke_BCrypt___ptrPInvoke__BCrypt_BCRYPT_ALGORITHM_IDENTIFIER__PInvoke_BCrypt *, [fwd] [in] [optional] [Mcg.CodeGen.EnumMarshaller] PInvoke_BCrypt_BCryptEnumAlgorithmsFlags__PInvoke_BCrypt__BCrypt_BCryptEnumAlgorithmsFlags__PInvoke_BCrypt, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("PInvoke.BCrypt, Version=0.3.0.0, Culture=neutral, PublicKeyToken=9e300f9f87f04a7a", "PInvoke.BCrypt", "BCryptEnumAlgorithms")]
		public static global::PInvoke.NTSTATUS__PInvoke_Windows_Core BCryptEnumAlgorithms(
					global::PInvoke.BCrypt_AlgorithmOperations__PInvoke_BCrypt dwAlgOperations, 
					out int pAlgCount, 
					out global::PInvoke.BCrypt_BCRYPT_ALGORITHM_IDENTIFIER__PInvoke_BCrypt* ppAlgList, 
					global::PInvoke.BCrypt_BCryptEnumAlgorithmsFlags__PInvoke_BCrypt dwFlags)
		{
			// Setup
			int unsafe_pAlgCount;
			global::PInvoke.BCrypt_BCRYPT_ALGORITHM_IDENTIFIER__PInvoke_BCrypt* unsafe_ppAlgList;
			global::PInvoke.NTSTATUS__PInvoke_Windows_Core unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.BCrypt_PInvokes.BCryptEnumAlgorithms(
								dwAlgOperations, 
								&(unsafe_pAlgCount), 
								&(unsafe_ppAlgList), 
								dwFlags
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			ppAlgList = (global::PInvoke.BCrypt_BCRYPT_ALGORITHM_IDENTIFIER__PInvoke_BCrypt*)unsafe_ppAlgList;
			pAlgCount = unsafe_pAlgCount;
			// Return
			return unsafe___value;
		}

		// Signature, BCryptOpenAlgorithmProvider, [fwd] [return] [Mcg.CodeGen.BlittableStructMarshaller] PInvoke_NTSTATUS__PInvoke_Windows_Core__PInvoke__NTSTATUS__PInvoke_Windows_Core, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.Win32HandleMarshaller] PInvoke_BCrypt_SafeAlgorithmHandle__PInvoke_BCrypt____w64 int, [fwd] [in] [Mcg.CodeGen.UnicodeStringMarshaller] string__wchar_t *, [fwd] [in] [Mcg.CodeGen.UnicodeStringMarshaller] string__wchar_t *, [fwd] [in] [Mcg.CodeGen.EnumMarshaller] PInvoke_BCrypt_BCryptOpenAlgorithmProviderFlags__PInvoke_BCrypt__BCrypt_BCryptOpenAlgorithmProviderFlags__PInvoke_BCrypt, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("PInvoke.BCrypt, Version=0.3.0.0, Culture=neutral, PublicKeyToken=9e300f9f87f04a7a", "PInvoke.BCrypt", "BCryptOpenAlgorithmProvider")]
		public static global::PInvoke.NTSTATUS__PInvoke_Windows_Core BCryptOpenAlgorithmProvider(
					out global::PInvoke.BCrypt_SafeAlgorithmHandle__PInvoke_BCrypt phAlgorithm, 
					string pszAlgId, 
					string pszImplementation, 
					global::PInvoke.BCrypt_BCryptOpenAlgorithmProviderFlags__PInvoke_BCrypt dwFlags)
		{
			// Setup
			global::System.IntPtr unsafe_phAlgorithm;
			ushort* unsafe_pszAlgId = default(ushort*);
			ushort* unsafe_pszImplementation = default(ushort*);
			global::PInvoke.NTSTATUS__PInvoke_Windows_Core unsafe___value;
			// Marshalling
			phAlgorithm = new global::PInvoke.BCrypt_SafeAlgorithmHandle__PInvoke_BCrypt();
			unsafe_phAlgorithm = phAlgorithm.DangerousGetHandle();
			fixed (char* pinned_pszAlgId = pszAlgId)
			{
				unsafe_pszAlgId = (ushort*)pinned_pszAlgId;
				fixed (char* pinned_pszImplementation = pszImplementation)
				{
					unsafe_pszImplementation = (ushort*)pinned_pszImplementation;
					// Call to native method
					unsafe___value = global::McgInterop.BCrypt_PInvokes.BCryptOpenAlgorithmProvider(
										&(unsafe_phAlgorithm), 
										unsafe_pszAlgId, 
										unsafe_pszImplementation, 
										dwFlags
									);
					global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
					global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
				}
			}
			global::System.Runtime.InteropServices.McgMarshal.InitializeHandle(
								phAlgorithm, 
								unsafe_phAlgorithm
							);
			// Return
			return unsafe___value;
		}

		// Signature, BCryptCreateHash, [fwd] [return] [Mcg.CodeGen.BlittableStructMarshaller] PInvoke_NTSTATUS__PInvoke_Windows_Core__PInvoke__NTSTATUS__PInvoke_Windows_Core, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] PInvoke_BCrypt_SafeAlgorithmHandle__PInvoke_BCrypt____w64 int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.Win32HandleMarshaller] PInvoke_BCrypt_SafeHashHandle__PInvoke_BCrypt____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_byte__unsigned char *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_byte__unsigned char *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.EnumMarshaller] PInvoke_BCrypt_BCryptCreateHashFlags__PInvoke_BCrypt__BCrypt_BCryptCreateHashFlags__PInvoke_BCrypt, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("PInvoke.BCrypt, Version=0.3.0.0, Culture=neutral, PublicKeyToken=9e300f9f87f04a7a", "PInvoke.BCrypt", "BCryptCreateHash")]
		public static global::PInvoke.NTSTATUS__PInvoke_Windows_Core BCryptCreateHash(
					global::PInvoke.BCrypt_SafeAlgorithmHandle__PInvoke_BCrypt hAlgorithm, 
					out global::PInvoke.BCrypt_SafeHashHandle__PInvoke_BCrypt phHash, 
					byte[] pbHashObject, 
					int cbHashObject, 
					byte[] pbSecret, 
					int cbSecret, 
					global::PInvoke.BCrypt_BCryptCreateHashFlags__PInvoke_BCrypt dwFlags)
		{
			// Setup
			bool addRefed = false;
			global::System.IntPtr unsafe_phHash;
			byte* unsafe_pbHashObject;
			byte* unsafe_pbSecret;
			global::PInvoke.NTSTATUS__PInvoke_Windows_Core unsafe___value;
			// Marshalling
			hAlgorithm.DangerousAddRef(ref addRefed);
			phHash = new global::PInvoke.BCrypt_SafeHashHandle__PInvoke_BCrypt();
			unsafe_phHash = phHash.DangerousGetHandle();
			fixed (byte* pinned_pbHashObject = global::McgInterop.McgCoreHelpers.GetArrayForCompat(pbHashObject))
			{
				unsafe_pbHashObject = (byte*)pinned_pbHashObject;
				fixed (byte* pinned_pbSecret = global::McgInterop.McgCoreHelpers.GetArrayForCompat(pbSecret))
				{
					unsafe_pbSecret = (byte*)pinned_pbSecret;
					// Call to native method
					unsafe___value = global::McgInterop.BCrypt_PInvokes.BCryptCreateHash(
										hAlgorithm.DangerousGetHandle(), 
										&(unsafe_phHash), 
										unsafe_pbHashObject, 
										cbHashObject, 
										unsafe_pbSecret, 
										cbSecret, 
										dwFlags
									);
					global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
					global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
				}
			}
			global::System.Runtime.InteropServices.McgMarshal.InitializeHandle(
								phHash, 
								unsafe_phHash
							);
			if (addRefed)
				hAlgorithm.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, BCryptEncrypt, [fwd] [return] [Mcg.CodeGen.BlittableStructMarshaller] PInvoke_NTSTATUS__PInvoke_Windows_Core__PInvoke__NTSTATUS__PInvoke_Windows_Core, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] PInvoke_BCrypt_SafeKeyHandle__PInvoke_BCrypt____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] byte___ptrunsigned char *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] void___ptrvoid *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] byte___ptrunsigned char *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] byte___ptrunsigned char *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.EnumMarshaller] PInvoke_BCrypt_BCryptEncryptFlags__PInvoke_BCrypt__BCrypt_BCryptEncryptFlags__PInvoke_BCrypt, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("PInvoke.BCrypt, Version=0.3.0.0, Culture=neutral, PublicKeyToken=9e300f9f87f04a7a", "PInvoke.BCrypt", "BCryptEncrypt")]
		public static global::PInvoke.NTSTATUS__PInvoke_Windows_Core BCryptEncrypt(
					global::PInvoke.BCrypt_SafeKeyHandle__PInvoke_BCrypt hKey, 
					byte* pbInput, 
					int cbInput, 
					void* pPaddingInfo, 
					byte* pbIV, 
					int cbIV, 
					byte* pbOutput, 
					int cbOutput, 
					out int pcbResult, 
					global::PInvoke.BCrypt_BCryptEncryptFlags__PInvoke_BCrypt dwFlags)
		{
			// Setup
			bool addRefed = false;
			int unsafe_pcbResult;
			global::PInvoke.NTSTATUS__PInvoke_Windows_Core unsafe___value;
			// Marshalling
			hKey.DangerousAddRef(ref addRefed);
			// Call to native method
			unsafe___value = global::McgInterop.BCrypt_PInvokes.BCryptEncrypt(
								hKey.DangerousGetHandle(), 
								((byte*)pbInput), 
								cbInput, 
								((void*)pPaddingInfo), 
								((byte*)pbIV), 
								cbIV, 
								((byte*)pbOutput), 
								cbOutput, 
								&(unsafe_pcbResult), 
								dwFlags
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			pcbResult = unsafe_pcbResult;
			if (addRefed)
				hKey.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, BCryptDecrypt, [fwd] [return] [Mcg.CodeGen.BlittableStructMarshaller] PInvoke_NTSTATUS__PInvoke_Windows_Core__PInvoke__NTSTATUS__PInvoke_Windows_Core, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] PInvoke_BCrypt_SafeKeyHandle__PInvoke_BCrypt____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] byte___ptrunsigned char *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] void___ptrvoid *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] byte___ptrunsigned char *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] byte___ptrunsigned char *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.EnumMarshaller] PInvoke_BCrypt_BCryptEncryptFlags__PInvoke_BCrypt__BCrypt_BCryptEncryptFlags__PInvoke_BCrypt, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("PInvoke.BCrypt, Version=0.3.0.0, Culture=neutral, PublicKeyToken=9e300f9f87f04a7a", "PInvoke.BCrypt", "BCryptDecrypt")]
		public static global::PInvoke.NTSTATUS__PInvoke_Windows_Core BCryptDecrypt(
					global::PInvoke.BCrypt_SafeKeyHandle__PInvoke_BCrypt hKey, 
					byte* pbInput, 
					int cbInput, 
					void* pPaddingInfo, 
					byte* pbIV, 
					int cbIV, 
					byte* pbOutput, 
					int cbOutput, 
					out int pcbResult, 
					global::PInvoke.BCrypt_BCryptEncryptFlags__PInvoke_BCrypt dwFlags)
		{
			// Setup
			bool addRefed = false;
			int unsafe_pcbResult;
			global::PInvoke.NTSTATUS__PInvoke_Windows_Core unsafe___value;
			// Marshalling
			hKey.DangerousAddRef(ref addRefed);
			// Call to native method
			unsafe___value = global::McgInterop.BCrypt_PInvokes.BCryptDecrypt(
								hKey.DangerousGetHandle(), 
								((byte*)pbInput), 
								cbInput, 
								((void*)pPaddingInfo), 
								((byte*)pbIV), 
								cbIV, 
								((byte*)pbOutput), 
								cbOutput, 
								&(unsafe_pcbResult), 
								dwFlags
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			pcbResult = unsafe_pcbResult;
			if (addRefed)
				hKey.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, BCryptHashData, [fwd] [return] [Mcg.CodeGen.BlittableStructMarshaller] PInvoke_NTSTATUS__PInvoke_Windows_Core__PInvoke__NTSTATUS__PInvoke_Windows_Core, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] PInvoke_BCrypt_SafeHashHandle__PInvoke_BCrypt____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_byte__unsigned char *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [optional] [Mcg.CodeGen.EnumMarshaller] PInvoke_BCrypt_BCryptHashDataFlags__PInvoke_BCrypt__BCrypt_BCryptHashDataFlags__PInvoke_BCrypt, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("PInvoke.BCrypt, Version=0.3.0.0, Culture=neutral, PublicKeyToken=9e300f9f87f04a7a", "PInvoke.BCrypt", "BCryptHashData")]
		public static global::PInvoke.NTSTATUS__PInvoke_Windows_Core BCryptHashData(
					global::PInvoke.BCrypt_SafeHashHandle__PInvoke_BCrypt hHash, 
					byte[] pbInput, 
					int cbInput, 
					global::PInvoke.BCrypt_BCryptHashDataFlags__PInvoke_BCrypt dwFlags)
		{
			// Setup
			bool addRefed = false;
			byte* unsafe_pbInput;
			global::PInvoke.NTSTATUS__PInvoke_Windows_Core unsafe___value;
			// Marshalling
			hHash.DangerousAddRef(ref addRefed);
			fixed (byte* pinned_pbInput = global::McgInterop.McgCoreHelpers.GetArrayForCompat(pbInput))
			{
				unsafe_pbInput = (byte*)pinned_pbInput;
				// Call to native method
				unsafe___value = global::McgInterop.BCrypt_PInvokes.BCryptHashData(
									hHash.DangerousGetHandle(), 
									unsafe_pbInput, 
									cbInput, 
									dwFlags
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			}
			if (addRefed)
				hHash.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, BCryptFinishHash, [fwd] [return] [Mcg.CodeGen.BlittableStructMarshaller] PInvoke_NTSTATUS__PInvoke_Windows_Core__PInvoke__NTSTATUS__PInvoke_Windows_Core, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] PInvoke_BCrypt_SafeHashHandle__PInvoke_BCrypt____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_byte__unsigned char *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [optional] [Mcg.CodeGen.EnumMarshaller] PInvoke_BCrypt_BCryptFinishHashFlags__PInvoke_BCrypt__BCrypt_BCryptFinishHashFlags__PInvoke_BCrypt, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("PInvoke.BCrypt, Version=0.3.0.0, Culture=neutral, PublicKeyToken=9e300f9f87f04a7a", "PInvoke.BCrypt", "BCryptFinishHash")]
		public static global::PInvoke.NTSTATUS__PInvoke_Windows_Core BCryptFinishHash(
					global::PInvoke.BCrypt_SafeHashHandle__PInvoke_BCrypt hHash, 
					byte[] pbOutput, 
					int cbOutput, 
					global::PInvoke.BCrypt_BCryptFinishHashFlags__PInvoke_BCrypt dwFlags)
		{
			// Setup
			bool addRefed = false;
			byte* unsafe_pbOutput;
			global::PInvoke.NTSTATUS__PInvoke_Windows_Core unsafe___value;
			// Marshalling
			hHash.DangerousAddRef(ref addRefed);
			fixed (byte* pinned_pbOutput = global::McgInterop.McgCoreHelpers.GetArrayForCompat(pbOutput))
			{
				unsafe_pbOutput = (byte*)pinned_pbOutput;
				// Call to native method
				unsafe___value = global::McgInterop.BCrypt_PInvokes.BCryptFinishHash(
									hHash.DangerousGetHandle(), 
									unsafe_pbOutput, 
									cbOutput, 
									dwFlags
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			}
			if (addRefed)
				hHash.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, BCryptSignHash, [fwd] [return] [Mcg.CodeGen.BlittableStructMarshaller] PInvoke_NTSTATUS__PInvoke_Windows_Core__PInvoke__NTSTATUS__PInvoke_Windows_Core, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] PInvoke_BCrypt_SafeKeyHandle__PInvoke_BCrypt____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] void___ptrvoid *, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_byte__unsigned char *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_byte__unsigned char *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.EnumMarshaller] PInvoke_BCrypt_BCryptSignHashFlags__PInvoke_BCrypt__BCrypt_BCryptSignHashFlags__PInvoke_BCrypt, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("PInvoke.BCrypt, Version=0.3.0.0, Culture=neutral, PublicKeyToken=9e300f9f87f04a7a", "PInvoke.BCrypt", "BCryptSignHash")]
		public static global::PInvoke.NTSTATUS__PInvoke_Windows_Core BCryptSignHash(
					global::PInvoke.BCrypt_SafeKeyHandle__PInvoke_BCrypt hKey, 
					void* pPaddingInfo, 
					byte[] pbInput, 
					int cbInput, 
					byte[] pbOutput, 
					int cbOutput, 
					out int pcbResult, 
					global::PInvoke.BCrypt_BCryptSignHashFlags__PInvoke_BCrypt dwFlags)
		{
			// Setup
			bool addRefed = false;
			byte* unsafe_pbInput;
			byte* unsafe_pbOutput;
			int unsafe_pcbResult = 0;
			global::PInvoke.NTSTATUS__PInvoke_Windows_Core unsafe___value;
			// Marshalling
			hKey.DangerousAddRef(ref addRefed);
			fixed (byte* pinned_pbInput = global::McgInterop.McgCoreHelpers.GetArrayForCompat(pbInput))
			{
				unsafe_pbInput = (byte*)pinned_pbInput;
				fixed (byte* pinned_pbOutput = global::McgInterop.McgCoreHelpers.GetArrayForCompat(pbOutput))
				{
					unsafe_pbOutput = (byte*)pinned_pbOutput;
					// Call to native method
					unsafe___value = global::McgInterop.BCrypt_PInvokes.BCryptSignHash(
										hKey.DangerousGetHandle(), 
										((void*)pPaddingInfo), 
										unsafe_pbInput, 
										cbInput, 
										unsafe_pbOutput, 
										cbOutput, 
										&(unsafe_pcbResult), 
										dwFlags
									);
					global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
					global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
					pcbResult = unsafe_pcbResult;
				}
			}
			if (addRefed)
				hKey.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, BCryptVerifySignature, [fwd] [return] [Mcg.CodeGen.BlittableStructMarshaller] PInvoke_NTSTATUS__PInvoke_Windows_Core__PInvoke__NTSTATUS__PInvoke_Windows_Core, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] PInvoke_BCrypt_SafeKeyHandle__PInvoke_BCrypt____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] void___ptrvoid *, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_byte__unsigned char *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_byte__unsigned char *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [optional] [Mcg.CodeGen.EnumMarshaller] PInvoke_BCrypt_BCryptSignHashFlags__PInvoke_BCrypt__BCrypt_BCryptSignHashFlags__PInvoke_BCrypt, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("PInvoke.BCrypt, Version=0.3.0.0, Culture=neutral, PublicKeyToken=9e300f9f87f04a7a", "PInvoke.BCrypt", "BCryptVerifySignature")]
		public static global::PInvoke.NTSTATUS__PInvoke_Windows_Core BCryptVerifySignature(
					global::PInvoke.BCrypt_SafeKeyHandle__PInvoke_BCrypt hKey, 
					void* pPaddingInfo, 
					byte[] pbHash, 
					int cbHash, 
					byte[] pbSignature, 
					int cbSignature, 
					global::PInvoke.BCrypt_BCryptSignHashFlags__PInvoke_BCrypt dwFlags)
		{
			// Setup
			bool addRefed = false;
			byte* unsafe_pbHash;
			byte* unsafe_pbSignature;
			global::PInvoke.NTSTATUS__PInvoke_Windows_Core unsafe___value;
			// Marshalling
			hKey.DangerousAddRef(ref addRefed);
			fixed (byte* pinned_pbHash = global::McgInterop.McgCoreHelpers.GetArrayForCompat(pbHash))
			{
				unsafe_pbHash = (byte*)pinned_pbHash;
				fixed (byte* pinned_pbSignature = global::McgInterop.McgCoreHelpers.GetArrayForCompat(pbSignature))
				{
					unsafe_pbSignature = (byte*)pinned_pbSignature;
					// Call to native method
					unsafe___value = global::McgInterop.BCrypt_PInvokes.BCryptVerifySignature(
										hKey.DangerousGetHandle(), 
										((void*)pPaddingInfo), 
										unsafe_pbHash, 
										cbHash, 
										unsafe_pbSignature, 
										cbSignature, 
										dwFlags
									);
					global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
					global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
				}
			}
			if (addRefed)
				hKey.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, BCryptGenerateKeyPair, [fwd] [return] [Mcg.CodeGen.BlittableStructMarshaller] PInvoke_NTSTATUS__PInvoke_Windows_Core__PInvoke__NTSTATUS__PInvoke_Windows_Core, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] PInvoke_BCrypt_SafeAlgorithmHandle__PInvoke_BCrypt____w64 int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.Win32HandleMarshaller] PInvoke_BCrypt_SafeKeyHandle__PInvoke_BCrypt____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [optional] [Mcg.CodeGen.EnumMarshaller] PInvoke_BCrypt_BCryptGenerateKeyPairFlags__PInvoke_BCrypt__BCrypt_BCryptGenerateKeyPairFlags__PInvoke_BCrypt, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("PInvoke.BCrypt, Version=0.3.0.0, Culture=neutral, PublicKeyToken=9e300f9f87f04a7a", "PInvoke.BCrypt", "BCryptGenerateKeyPair")]
		public static global::PInvoke.NTSTATUS__PInvoke_Windows_Core BCryptGenerateKeyPair(
					global::PInvoke.BCrypt_SafeAlgorithmHandle__PInvoke_BCrypt hAlgorithm, 
					out global::PInvoke.BCrypt_SafeKeyHandle__PInvoke_BCrypt phKey, 
					int dwLength, 
					global::PInvoke.BCrypt_BCryptGenerateKeyPairFlags__PInvoke_BCrypt dwFlags)
		{
			// Setup
			bool addRefed = false;
			global::System.IntPtr unsafe_phKey;
			global::PInvoke.NTSTATUS__PInvoke_Windows_Core unsafe___value;
			// Marshalling
			hAlgorithm.DangerousAddRef(ref addRefed);
			phKey = new global::PInvoke.BCrypt_SafeKeyHandle__PInvoke_BCrypt();
			unsafe_phKey = phKey.DangerousGetHandle();
			// Call to native method
			unsafe___value = global::McgInterop.BCrypt_PInvokes.BCryptGenerateKeyPair(
								hAlgorithm.DangerousGetHandle(), 
								&(unsafe_phKey), 
								dwLength, 
								dwFlags
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			global::System.Runtime.InteropServices.McgMarshal.InitializeHandle(
								phKey, 
								unsafe_phKey
							);
			if (addRefed)
				hAlgorithm.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, BCryptGenerateSymmetricKey, [fwd] [return] [Mcg.CodeGen.BlittableStructMarshaller] PInvoke_NTSTATUS__PInvoke_Windows_Core__PInvoke__NTSTATUS__PInvoke_Windows_Core, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] PInvoke_BCrypt_SafeAlgorithmHandle__PInvoke_BCrypt____w64 int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.Win32HandleMarshaller] PInvoke_BCrypt_SafeKeyHandle__PInvoke_BCrypt____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_byte__unsigned char *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_byte__unsigned char *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [optional] [Mcg.CodeGen.EnumMarshaller] PInvoke_BCrypt_BCryptGenerateSymmetricKeyFlags__PInvoke_BCrypt__BCrypt_BCryptGenerateSymmetricKeyFlags__PInvoke_BCrypt, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("PInvoke.BCrypt, Version=0.3.0.0, Culture=neutral, PublicKeyToken=9e300f9f87f04a7a", "PInvoke.BCrypt", "BCryptGenerateSymmetricKey")]
		public static global::PInvoke.NTSTATUS__PInvoke_Windows_Core BCryptGenerateSymmetricKey(
					global::PInvoke.BCrypt_SafeAlgorithmHandle__PInvoke_BCrypt hAlgorithm, 
					out global::PInvoke.BCrypt_SafeKeyHandle__PInvoke_BCrypt phKey, 
					byte[] pbKeyObject, 
					int cbKeyObject, 
					byte[] pbSecret, 
					int cbSecret, 
					global::PInvoke.BCrypt_BCryptGenerateSymmetricKeyFlags__PInvoke_BCrypt flags)
		{
			// Setup
			bool addRefed = false;
			global::System.IntPtr unsafe_phKey;
			byte* unsafe_pbKeyObject;
			byte* unsafe_pbSecret;
			global::PInvoke.NTSTATUS__PInvoke_Windows_Core unsafe___value;
			// Marshalling
			hAlgorithm.DangerousAddRef(ref addRefed);
			phKey = new global::PInvoke.BCrypt_SafeKeyHandle__PInvoke_BCrypt();
			unsafe_phKey = phKey.DangerousGetHandle();
			fixed (byte* pinned_pbKeyObject = global::McgInterop.McgCoreHelpers.GetArrayForCompat(pbKeyObject))
			{
				unsafe_pbKeyObject = (byte*)pinned_pbKeyObject;
				fixed (byte* pinned_pbSecret = global::McgInterop.McgCoreHelpers.GetArrayForCompat(pbSecret))
				{
					unsafe_pbSecret = (byte*)pinned_pbSecret;
					// Call to native method
					unsafe___value = global::McgInterop.BCrypt_PInvokes.BCryptGenerateSymmetricKey(
										hAlgorithm.DangerousGetHandle(), 
										&(unsafe_phKey), 
										unsafe_pbKeyObject, 
										cbKeyObject, 
										unsafe_pbSecret, 
										cbSecret, 
										flags
									);
					global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
					global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
				}
			}
			global::System.Runtime.InteropServices.McgMarshal.InitializeHandle(
								phKey, 
								unsafe_phKey
							);
			if (addRefed)
				hAlgorithm.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, BCryptFinalizeKeyPair, [fwd] [return] [Mcg.CodeGen.BlittableStructMarshaller] PInvoke_NTSTATUS__PInvoke_Windows_Core__PInvoke__NTSTATUS__PInvoke_Windows_Core, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] PInvoke_BCrypt_SafeKeyHandle__PInvoke_BCrypt____w64 int, [fwd] [in] [optional] [Mcg.CodeGen.EnumMarshaller] PInvoke_BCrypt_BCryptFinalizeKeyPairFlags__PInvoke_BCrypt__BCrypt_BCryptFinalizeKeyPairFlags__PInvoke_BCrypt, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("PInvoke.BCrypt, Version=0.3.0.0, Culture=neutral, PublicKeyToken=9e300f9f87f04a7a", "PInvoke.BCrypt", "BCryptFinalizeKeyPair")]
		public static global::PInvoke.NTSTATUS__PInvoke_Windows_Core BCryptFinalizeKeyPair(
					global::PInvoke.BCrypt_SafeKeyHandle__PInvoke_BCrypt hKey, 
					global::PInvoke.BCrypt_BCryptFinalizeKeyPairFlags__PInvoke_BCrypt dwFlags)
		{
			// Setup
			bool addRefed = false;
			global::PInvoke.NTSTATUS__PInvoke_Windows_Core unsafe___value;
			// Marshalling
			hKey.DangerousAddRef(ref addRefed);
			// Call to native method
			unsafe___value = global::McgInterop.BCrypt_PInvokes.BCryptFinalizeKeyPair(
								hKey.DangerousGetHandle(), 
								dwFlags
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			if (addRefed)
				hKey.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, BCryptImportKey, [fwd] [return] [Mcg.CodeGen.BlittableStructMarshaller] PInvoke_NTSTATUS__PInvoke_Windows_Core__PInvoke__NTSTATUS__PInvoke_Windows_Core, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] PInvoke_BCrypt_SafeAlgorithmHandle__PInvoke_BCrypt____w64 int, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] PInvoke_BCrypt_SafeKeyHandle__PInvoke_BCrypt____w64 int, [fwd] [in] [Mcg.CodeGen.UnicodeStringMarshaller] string__wchar_t *, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.Win32HandleMarshaller] PInvoke_BCrypt_SafeKeyHandle__PInvoke_BCrypt____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_byte__unsigned char *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_byte__unsigned char *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [optional] [Mcg.CodeGen.EnumMarshaller] PInvoke_BCrypt_BCryptImportKeyFlags__PInvoke_BCrypt__BCrypt_BCryptImportKeyFlags__PInvoke_BCrypt, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("PInvoke.BCrypt, Version=0.3.0.0, Culture=neutral, PublicKeyToken=9e300f9f87f04a7a", "PInvoke.BCrypt", "BCryptImportKey")]
		public static global::PInvoke.NTSTATUS__PInvoke_Windows_Core BCryptImportKey(
					global::PInvoke.BCrypt_SafeAlgorithmHandle__PInvoke_BCrypt hAlgorithm, 
					global::PInvoke.BCrypt_SafeKeyHandle__PInvoke_BCrypt hImportKey, 
					string pszBlobType, 
					out global::PInvoke.BCrypt_SafeKeyHandle__PInvoke_BCrypt phKey, 
					byte[] pbKeyObject, 
					int cbKeyObject, 
					byte[] pbInput, 
					int cbInput, 
					global::PInvoke.BCrypt_BCryptImportKeyFlags__PInvoke_BCrypt dwFlags)
		{
			// Setup
			bool addRefed = false;
			bool addRefed_1 = false;
			ushort* unsafe_pszBlobType = default(ushort*);
			global::System.IntPtr unsafe_phKey;
			byte* unsafe_pbKeyObject;
			byte* unsafe_pbInput;
			global::PInvoke.NTSTATUS__PInvoke_Windows_Core unsafe___value;
			// Marshalling
			hAlgorithm.DangerousAddRef(ref addRefed);
			hImportKey.DangerousAddRef(ref addRefed_1);
			fixed (char* pinned_pszBlobType = pszBlobType)
			{
				unsafe_pszBlobType = (ushort*)pinned_pszBlobType;
				phKey = new global::PInvoke.BCrypt_SafeKeyHandle__PInvoke_BCrypt();
				unsafe_phKey = phKey.DangerousGetHandle();
				fixed (byte* pinned_pbKeyObject = global::McgInterop.McgCoreHelpers.GetArrayForCompat(pbKeyObject))
				{
					unsafe_pbKeyObject = (byte*)pinned_pbKeyObject;
					fixed (byte* pinned_pbInput = global::McgInterop.McgCoreHelpers.GetArrayForCompat(pbInput))
					{
						unsafe_pbInput = (byte*)pinned_pbInput;
						// Call to native method
						unsafe___value = global::McgInterop.BCrypt_PInvokes.BCryptImportKey(
											hAlgorithm.DangerousGetHandle(), 
											hImportKey.DangerousGetHandle(), 
											unsafe_pszBlobType, 
											&(unsafe_phKey), 
											unsafe_pbKeyObject, 
											cbKeyObject, 
											unsafe_pbInput, 
											cbInput, 
											dwFlags
										);
						global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
						global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
					}
				}
				global::System.Runtime.InteropServices.McgMarshal.InitializeHandle(
									phKey, 
									unsafe_phKey
								);
			}
			if (addRefed_1)
				hImportKey.DangerousRelease();
			if (addRefed)
				hAlgorithm.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, BCryptImportKeyPair, [fwd] [return] [Mcg.CodeGen.BlittableStructMarshaller] PInvoke_NTSTATUS__PInvoke_Windows_Core__PInvoke__NTSTATUS__PInvoke_Windows_Core, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] PInvoke_BCrypt_SafeAlgorithmHandle__PInvoke_BCrypt____w64 int, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] PInvoke_BCrypt_SafeKeyHandle__PInvoke_BCrypt____w64 int, [fwd] [in] [Mcg.CodeGen.UnicodeStringMarshaller] string__wchar_t *, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.Win32HandleMarshaller] PInvoke_BCrypt_SafeKeyHandle__PInvoke_BCrypt____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_byte__unsigned char *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.EnumMarshaller] PInvoke_BCrypt_BCryptImportKeyPairFlags__PInvoke_BCrypt__BCrypt_BCryptImportKeyPairFlags__PInvoke_BCrypt, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("PInvoke.BCrypt, Version=0.3.0.0, Culture=neutral, PublicKeyToken=9e300f9f87f04a7a", "PInvoke.BCrypt", "BCryptImportKeyPair")]
		public static global::PInvoke.NTSTATUS__PInvoke_Windows_Core BCryptImportKeyPair(
					global::PInvoke.BCrypt_SafeAlgorithmHandle__PInvoke_BCrypt hAlgorithm, 
					global::PInvoke.BCrypt_SafeKeyHandle__PInvoke_BCrypt hImportKey, 
					string pszBlobType, 
					out global::PInvoke.BCrypt_SafeKeyHandle__PInvoke_BCrypt phKey, 
					byte[] pbInput, 
					int cbInput, 
					global::PInvoke.BCrypt_BCryptImportKeyPairFlags__PInvoke_BCrypt dwFlags)
		{
			// Setup
			bool addRefed = false;
			bool addRefed_1 = false;
			ushort* unsafe_pszBlobType = default(ushort*);
			global::System.IntPtr unsafe_phKey;
			byte* unsafe_pbInput;
			global::PInvoke.NTSTATUS__PInvoke_Windows_Core unsafe___value;
			// Marshalling
			hAlgorithm.DangerousAddRef(ref addRefed);
			hImportKey.DangerousAddRef(ref addRefed_1);
			fixed (char* pinned_pszBlobType = pszBlobType)
			{
				unsafe_pszBlobType = (ushort*)pinned_pszBlobType;
				phKey = new global::PInvoke.BCrypt_SafeKeyHandle__PInvoke_BCrypt();
				unsafe_phKey = phKey.DangerousGetHandle();
				fixed (byte* pinned_pbInput = global::McgInterop.McgCoreHelpers.GetArrayForCompat(pbInput))
				{
					unsafe_pbInput = (byte*)pinned_pbInput;
					// Call to native method
					unsafe___value = global::McgInterop.BCrypt_PInvokes.BCryptImportKeyPair(
										hAlgorithm.DangerousGetHandle(), 
										hImportKey.DangerousGetHandle(), 
										unsafe_pszBlobType, 
										&(unsafe_phKey), 
										unsafe_pbInput, 
										cbInput, 
										dwFlags
									);
					global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
					global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
				}
				global::System.Runtime.InteropServices.McgMarshal.InitializeHandle(
									phKey, 
									unsafe_phKey
								);
			}
			if (addRefed_1)
				hImportKey.DangerousRelease();
			if (addRefed)
				hAlgorithm.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, BCryptExportKey, [fwd] [return] [Mcg.CodeGen.BlittableStructMarshaller] PInvoke_NTSTATUS__PInvoke_Windows_Core__PInvoke__NTSTATUS__PInvoke_Windows_Core, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] PInvoke_BCrypt_SafeKeyHandle__PInvoke_BCrypt____w64 int, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] PInvoke_BCrypt_SafeKeyHandle__PInvoke_BCrypt____w64 int, [fwd] [in] [Mcg.CodeGen.UnicodeStringMarshaller] string__wchar_t *, [fwd] [out] [Mcg.CodeGen.BlittableArrayMarshaller] rg_byte__unsigned char *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [optional] [Mcg.CodeGen.EnumMarshaller] PInvoke_BCrypt_BCryptExportKeyFlags__PInvoke_BCrypt__BCrypt_BCryptExportKeyFlags__PInvoke_BCrypt, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("PInvoke.BCrypt, Version=0.3.0.0, Culture=neutral, PublicKeyToken=9e300f9f87f04a7a", "PInvoke.BCrypt", "BCryptExportKey")]
		public static global::PInvoke.NTSTATUS__PInvoke_Windows_Core BCryptExportKey(
					global::PInvoke.BCrypt_SafeKeyHandle__PInvoke_BCrypt hKey, 
					global::PInvoke.BCrypt_SafeKeyHandle__PInvoke_BCrypt hExportKey, 
					string pszBlobType, 
					byte[] pbOutput, 
					int cbOutput, 
					out int pcbResult, 
					global::PInvoke.BCrypt_BCryptExportKeyFlags__PInvoke_BCrypt dwFlags)
		{
			// Setup
			bool addRefed = false;
			bool addRefed_1 = false;
			ushort* unsafe_pszBlobType = default(ushort*);
			byte* unsafe_pbOutput;
			int unsafe_pcbResult = 0;
			global::PInvoke.NTSTATUS__PInvoke_Windows_Core unsafe___value;
			// Marshalling
			hKey.DangerousAddRef(ref addRefed);
			hExportKey.DangerousAddRef(ref addRefed_1);
			fixed (char* pinned_pszBlobType = pszBlobType)
			{
				unsafe_pszBlobType = (ushort*)pinned_pszBlobType;
				fixed (byte* pinned_pbOutput = global::McgInterop.McgCoreHelpers.GetArrayForCompat(pbOutput))
				{
					unsafe_pbOutput = (byte*)pinned_pbOutput;
					// Call to native method
					unsafe___value = global::McgInterop.BCrypt_PInvokes.BCryptExportKey(
										hKey.DangerousGetHandle(), 
										hExportKey.DangerousGetHandle(), 
										unsafe_pszBlobType, 
										unsafe_pbOutput, 
										cbOutput, 
										&(unsafe_pcbResult), 
										dwFlags
									);
					global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
					global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
					pcbResult = unsafe_pcbResult;
				}
			}
			if (addRefed_1)
				hExportKey.DangerousRelease();
			if (addRefed)
				hKey.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, BCryptSecretAgreement, [fwd] [return] [Mcg.CodeGen.BlittableStructMarshaller] PInvoke_NTSTATUS__PInvoke_Windows_Core__PInvoke__NTSTATUS__PInvoke_Windows_Core, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] PInvoke_BCrypt_SafeKeyHandle__PInvoke_BCrypt____w64 int, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] PInvoke_BCrypt_SafeKeyHandle__PInvoke_BCrypt____w64 int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.Win32HandleMarshaller] PInvoke_BCrypt_SafeSecretHandle__PInvoke_BCrypt____w64 int, [fwd] [in] [optional] [Mcg.CodeGen.EnumMarshaller] PInvoke_BCrypt_BCryptSecretAgreementFlags__PInvoke_BCrypt__BCrypt_BCryptSecretAgreementFlags__PInvoke_BCrypt, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("PInvoke.BCrypt, Version=0.3.0.0, Culture=neutral, PublicKeyToken=9e300f9f87f04a7a", "PInvoke.BCrypt", "BCryptSecretAgreement")]
		public static global::PInvoke.NTSTATUS__PInvoke_Windows_Core BCryptSecretAgreement(
					global::PInvoke.BCrypt_SafeKeyHandle__PInvoke_BCrypt privateKey, 
					global::PInvoke.BCrypt_SafeKeyHandle__PInvoke_BCrypt publicKey, 
					out global::PInvoke.BCrypt_SafeSecretHandle__PInvoke_BCrypt secret, 
					global::PInvoke.BCrypt_BCryptSecretAgreementFlags__PInvoke_BCrypt flags)
		{
			// Setup
			bool addRefed = false;
			bool addRefed_1 = false;
			global::System.IntPtr unsafe_secret;
			global::PInvoke.NTSTATUS__PInvoke_Windows_Core unsafe___value;
			// Marshalling
			privateKey.DangerousAddRef(ref addRefed);
			publicKey.DangerousAddRef(ref addRefed_1);
			secret = new global::PInvoke.BCrypt_SafeSecretHandle__PInvoke_BCrypt();
			unsafe_secret = secret.DangerousGetHandle();
			// Call to native method
			unsafe___value = global::McgInterop.BCrypt_PInvokes.BCryptSecretAgreement(
								privateKey.DangerousGetHandle(), 
								publicKey.DangerousGetHandle(), 
								&(unsafe_secret), 
								flags
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			global::System.Runtime.InteropServices.McgMarshal.InitializeHandle(
								secret, 
								unsafe_secret
							);
			if (addRefed_1)
				publicKey.DangerousRelease();
			if (addRefed)
				privateKey.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, BCryptDeriveKey, [fwd] [return] [Mcg.CodeGen.BlittableStructMarshaller] PInvoke_NTSTATUS__PInvoke_Windows_Core__PInvoke__NTSTATUS__PInvoke_Windows_Core, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] PInvoke_BCrypt_SafeSecretHandle__PInvoke_BCrypt____w64 int, [fwd] [in] [Mcg.CodeGen.UnicodeStringMarshaller] string__wchar_t *, [fwd] [in] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableStructMarshaller] PInvoke_BCrypt_BCryptBufferDesc__PInvoke_BCrypt__PInvoke__BCrypt_BCryptBufferDesc__PInvoke_BCrypt, [fwd] [out] [Mcg.CodeGen.BlittableArrayMarshaller] rg_byte__unsigned char *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.EnumMarshaller] PInvoke_BCrypt_BCryptDeriveKeyFlags__PInvoke_BCrypt__BCrypt_BCryptDeriveKeyFlags__PInvoke_BCrypt, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("PInvoke.BCrypt, Version=0.3.0.0, Culture=neutral, PublicKeyToken=9e300f9f87f04a7a", "PInvoke.BCrypt", "BCryptDeriveKey")]
		public static global::PInvoke.NTSTATUS__PInvoke_Windows_Core BCryptDeriveKey(
					global::PInvoke.BCrypt_SafeSecretHandle__PInvoke_BCrypt sharedSecret, 
					string keyDerivationFunction, 
					ref global::PInvoke.BCrypt_BCryptBufferDesc__PInvoke_BCrypt kdfParameters, 
					byte[] derivedKey, 
					int derivedKeySize, 
					out int resultSize, 
					global::PInvoke.BCrypt_BCryptDeriveKeyFlags__PInvoke_BCrypt flags)
		{
			// Setup
			bool addRefed = false;
			ushort* unsafe_keyDerivationFunction = default(ushort*);
			global::PInvoke.BCrypt_BCryptBufferDesc__PInvoke_BCrypt unsafe_kdfParameters;
			byte* unsafe_derivedKey;
			int unsafe_resultSize;
			global::PInvoke.NTSTATUS__PInvoke_Windows_Core unsafe___value;
			// Marshalling
			sharedSecret.DangerousAddRef(ref addRefed);
			fixed (char* pinned_keyDerivationFunction = keyDerivationFunction)
			{
				unsafe_keyDerivationFunction = (ushort*)pinned_keyDerivationFunction;
				unsafe_kdfParameters = kdfParameters;
				fixed (byte* pinned_derivedKey = global::McgInterop.McgCoreHelpers.GetArrayForCompat(derivedKey))
				{
					unsafe_derivedKey = (byte*)pinned_derivedKey;
					// Call to native method
					unsafe___value = global::McgInterop.BCrypt_PInvokes.BCryptDeriveKey(
										sharedSecret.DangerousGetHandle(), 
										unsafe_keyDerivationFunction, 
										&(unsafe_kdfParameters), 
										unsafe_derivedKey, 
										derivedKeySize, 
										&(unsafe_resultSize), 
										flags
									);
					global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
					global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
					resultSize = unsafe_resultSize;
				}
			}
			if (addRefed)
				sharedSecret.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, BCryptSetProperty, [fwd] [return] [Mcg.CodeGen.BlittableStructMarshaller] PInvoke_NTSTATUS__PInvoke_Windows_Core__PInvoke__NTSTATUS__PInvoke_Windows_Core, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] System_Runtime_InteropServices_SafeHandle____w64 int, [fwd] [in] [Mcg.CodeGen.UnicodeStringMarshaller] string__wchar_t *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] byte___ptrunsigned char *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [optional] [Mcg.CodeGen.EnumMarshaller] PInvoke_BCrypt_BCryptSetPropertyFlags__PInvoke_BCrypt__BCrypt_BCryptSetPropertyFlags__PInvoke_BCrypt, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("PInvoke.BCrypt, Version=0.3.0.0, Culture=neutral, PublicKeyToken=9e300f9f87f04a7a", "PInvoke.BCrypt", "BCryptSetProperty")]
		public static global::PInvoke.NTSTATUS__PInvoke_Windows_Core BCryptSetProperty(
					global::System.Runtime.InteropServices.SafeHandle hObject, 
					string pszProperty, 
					byte* pbInput, 
					int cbInput, 
					global::PInvoke.BCrypt_BCryptSetPropertyFlags__PInvoke_BCrypt dwFlags)
		{
			// Setup
			bool addRefed = false;
			ushort* unsafe_pszProperty = default(ushort*);
			global::PInvoke.NTSTATUS__PInvoke_Windows_Core unsafe___value;
			// Marshalling
			hObject.DangerousAddRef(ref addRefed);
			fixed (char* pinned_pszProperty = pszProperty)
			{
				unsafe_pszProperty = (ushort*)pinned_pszProperty;
				// Call to native method
				unsafe___value = global::McgInterop.BCrypt_PInvokes.BCryptSetProperty(
									hObject.DangerousGetHandle(), 
									unsafe_pszProperty, 
									((byte*)pbInput), 
									cbInput, 
									dwFlags
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			}
			if (addRefed)
				hObject.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, BCryptSetProperty__0, [fwd] [return] [Mcg.CodeGen.BlittableStructMarshaller] PInvoke_NTSTATUS__PInvoke_Windows_Core__PInvoke__NTSTATUS__PInvoke_Windows_Core, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] System_Runtime_InteropServices_SafeHandle____w64 int, [fwd] [in] [Mcg.CodeGen.UnicodeStringMarshaller] string__wchar_t *, [fwd] [in] [Mcg.CodeGen.UnicodeStringMarshaller] string__wchar_t *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [optional] [Mcg.CodeGen.EnumMarshaller] PInvoke_BCrypt_BCryptSetPropertyFlags__PInvoke_BCrypt__BCrypt_BCryptSetPropertyFlags__PInvoke_BCrypt, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("PInvoke.BCrypt, Version=0.3.0.0, Culture=neutral, PublicKeyToken=9e300f9f87f04a7a", "PInvoke.BCrypt", "BCryptSetProperty")]
		public static global::PInvoke.NTSTATUS__PInvoke_Windows_Core BCryptSetProperty__0(
					global::System.Runtime.InteropServices.SafeHandle hObject, 
					string pszProperty, 
					string pbInput, 
					int cbInput, 
					global::PInvoke.BCrypt_BCryptSetPropertyFlags__PInvoke_BCrypt dwFlags)
		{
			// Setup
			bool addRefed = false;
			ushort* unsafe_pszProperty = default(ushort*);
			ushort* unsafe_pbInput = default(ushort*);
			global::PInvoke.NTSTATUS__PInvoke_Windows_Core unsafe___value;
			// Marshalling
			hObject.DangerousAddRef(ref addRefed);
			fixed (char* pinned_pszProperty = pszProperty)
			{
				unsafe_pszProperty = (ushort*)pinned_pszProperty;
				fixed (char* pinned_pbInput = pbInput)
				{
					unsafe_pbInput = (ushort*)pinned_pbInput;
					// Call to native method
					unsafe___value = global::McgInterop.BCrypt_PInvokes.BCryptSetProperty__0(
										hObject.DangerousGetHandle(), 
										unsafe_pszProperty, 
										unsafe_pbInput, 
										cbInput, 
										dwFlags
									);
					global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
					global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
				}
			}
			if (addRefed)
				hObject.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, BCryptGetProperty, [fwd] [return] [Mcg.CodeGen.BlittableStructMarshaller] PInvoke_NTSTATUS__PInvoke_Windows_Core__PInvoke__NTSTATUS__PInvoke_Windows_Core, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] System_Runtime_InteropServices_SafeHandle____w64 int, [fwd] [in] [Mcg.CodeGen.UnicodeStringMarshaller] string__wchar_t *, [fwd] [out] [Mcg.CodeGen.BlittableArrayMarshaller] rg_byte__unsigned char *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [optional] [Mcg.CodeGen.EnumMarshaller] PInvoke_BCrypt_BCryptGetPropertyFlags__PInvoke_BCrypt__BCrypt_BCryptGetPropertyFlags__PInvoke_BCrypt, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("PInvoke.BCrypt, Version=0.3.0.0, Culture=neutral, PublicKeyToken=9e300f9f87f04a7a", "PInvoke.BCrypt", "BCryptGetProperty")]
		public static global::PInvoke.NTSTATUS__PInvoke_Windows_Core BCryptGetProperty(
					global::System.Runtime.InteropServices.SafeHandle hObject, 
					string property, 
					byte[] output, 
					int outputSize, 
					out int resultSize, 
					global::PInvoke.BCrypt_BCryptGetPropertyFlags__PInvoke_BCrypt flags)
		{
			// Setup
			bool addRefed = false;
			ushort* unsafe_property = default(ushort*);
			byte* unsafe_output;
			int unsafe_resultSize;
			global::PInvoke.NTSTATUS__PInvoke_Windows_Core unsafe___value;
			// Marshalling
			hObject.DangerousAddRef(ref addRefed);
			fixed (char* pinned_property = property)
			{
				unsafe_property = (ushort*)pinned_property;
				fixed (byte* pinned_output = global::McgInterop.McgCoreHelpers.GetArrayForCompat(output))
				{
					unsafe_output = (byte*)pinned_output;
					// Call to native method
					unsafe___value = global::McgInterop.BCrypt_PInvokes.BCryptGetProperty(
										hObject.DangerousGetHandle(), 
										unsafe_property, 
										unsafe_output, 
										outputSize, 
										&(unsafe_resultSize), 
										flags
									);
					global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
					global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
					resultSize = unsafe_resultSize;
				}
			}
			if (addRefed)
				hObject.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, BCryptGenRandom, [fwd] [return] [Mcg.CodeGen.BlittableStructMarshaller] PInvoke_NTSTATUS__PInvoke_Windows_Core__PInvoke__NTSTATUS__PInvoke_Windows_Core, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] PInvoke_BCrypt_SafeAlgorithmHandle__PInvoke_BCrypt____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_byte__unsigned char *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [optional] [Mcg.CodeGen.EnumMarshaller] PInvoke_BCrypt_BCryptGenRandomFlags__PInvoke_BCrypt__BCrypt_BCryptGenRandomFlags__PInvoke_BCrypt, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("PInvoke.BCrypt, Version=0.3.0.0, Culture=neutral, PublicKeyToken=9e300f9f87f04a7a", "PInvoke.BCrypt", "BCryptGenRandom")]
		public static global::PInvoke.NTSTATUS__PInvoke_Windows_Core BCryptGenRandom(
					global::PInvoke.BCrypt_SafeAlgorithmHandle__PInvoke_BCrypt hAlgorithm, 
					byte[] pbBuffer, 
					int cbBuffer, 
					global::PInvoke.BCrypt_BCryptGenRandomFlags__PInvoke_BCrypt flags)
		{
			// Setup
			bool addRefed = false;
			byte* unsafe_pbBuffer;
			global::PInvoke.NTSTATUS__PInvoke_Windows_Core unsafe___value;
			// Marshalling
			hAlgorithm.DangerousAddRef(ref addRefed);
			fixed (byte* pinned_pbBuffer = global::McgInterop.McgCoreHelpers.GetArrayForCompat(pbBuffer))
			{
				unsafe_pbBuffer = (byte*)pinned_pbBuffer;
				// Call to native method
				unsafe___value = global::McgInterop.BCrypt_PInvokes.BCryptGenRandom(
									hAlgorithm.DangerousGetHandle(), 
									unsafe_pbBuffer, 
									cbBuffer, 
									flags
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			}
			if (addRefed)
				hAlgorithm.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, BCryptFreeBuffer, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] void___ptrvoid *, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("PInvoke.BCrypt, Version=0.3.0.0, Culture=neutral, PublicKeyToken=9e300f9f87f04a7a", "PInvoke.BCrypt", "BCryptFreeBuffer")]
		public static void BCryptFreeBuffer(void* pvBuffer)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.BCrypt_PInvokes.BCryptFreeBuffer(((void*)pvBuffer));
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			// Return
		}

		// Signature, BCryptCloseAlgorithmProvider, [fwd] [return] [Mcg.CodeGen.BlittableStructMarshaller] PInvoke_NTSTATUS__PInvoke_Windows_Core__PInvoke__NTSTATUS__PInvoke_Windows_Core, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [optional] [Mcg.CodeGen.EnumMarshaller] PInvoke_BCrypt_BCryptCloseAlgorithmProviderFlags__PInvoke_BCrypt__BCrypt_BCryptCloseAlgorithmProviderFlags__PInvoke_BCrypt, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("PInvoke.BCrypt, Version=0.3.0.0, Culture=neutral, PublicKeyToken=9e300f9f87f04a7a", "PInvoke.BCrypt", "BCryptCloseAlgorithmProvider")]
		public static global::PInvoke.NTSTATUS__PInvoke_Windows_Core BCryptCloseAlgorithmProvider(
					global::System.IntPtr algorithmHandle, 
					global::PInvoke.BCrypt_BCryptCloseAlgorithmProviderFlags__PInvoke_BCrypt flags)
		{
			// Setup
			global::PInvoke.NTSTATUS__PInvoke_Windows_Core unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.BCrypt_PInvokes.BCryptCloseAlgorithmProvider(
								algorithmHandle, 
								flags
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			// Return
			return unsafe___value;
		}

		// Signature, BCryptDestroyHash, [fwd] [return] [Mcg.CodeGen.BlittableStructMarshaller] PInvoke_NTSTATUS__PInvoke_Windows_Core__PInvoke__NTSTATUS__PInvoke_Windows_Core, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("PInvoke.BCrypt, Version=0.3.0.0, Culture=neutral, PublicKeyToken=9e300f9f87f04a7a", "PInvoke.BCrypt", "BCryptDestroyHash")]
		public static global::PInvoke.NTSTATUS__PInvoke_Windows_Core BCryptDestroyHash(global::System.IntPtr hHash)
		{
			// Setup
			global::PInvoke.NTSTATUS__PInvoke_Windows_Core unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.BCrypt_PInvokes.BCryptDestroyHash(hHash);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			// Return
			return unsafe___value;
		}

		// Signature, BCryptDestroyKey, [fwd] [return] [Mcg.CodeGen.BlittableStructMarshaller] PInvoke_NTSTATUS__PInvoke_Windows_Core__PInvoke__NTSTATUS__PInvoke_Windows_Core, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("PInvoke.BCrypt, Version=0.3.0.0, Culture=neutral, PublicKeyToken=9e300f9f87f04a7a", "PInvoke.BCrypt", "BCryptDestroyKey")]
		public static global::PInvoke.NTSTATUS__PInvoke_Windows_Core BCryptDestroyKey(global::System.IntPtr hKey)
		{
			// Setup
			global::PInvoke.NTSTATUS__PInvoke_Windows_Core unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.BCrypt_PInvokes.BCryptDestroyKey(hKey);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			// Return
			return unsafe___value;
		}

		// Signature, BCryptDestroySecret, [fwd] [return] [Mcg.CodeGen.BlittableStructMarshaller] PInvoke_NTSTATUS__PInvoke_Windows_Core__PInvoke__NTSTATUS__PInvoke_Windows_Core, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("PInvoke.BCrypt, Version=0.3.0.0, Culture=neutral, PublicKeyToken=9e300f9f87f04a7a", "PInvoke.BCrypt", "BCryptDestroySecret")]
		public static global::PInvoke.NTSTATUS__PInvoke_Windows_Core BCryptDestroySecret(global::System.IntPtr hSecret)
		{
			// Setup
			global::PInvoke.NTSTATUS__PInvoke_Windows_Core unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.BCrypt_PInvokes.BCryptDestroySecret(hSecret);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			// Return
			return unsafe___value;
		}
	}

	/// <summary>
	/// P/Invoke class for module 'api-ms-win-core-file-l1-2-0.dll'
	/// </summary>
	public unsafe static partial class api_ms_win_core_file_l1_2_0_dll
	{
		// Signature, FindFirstFileEx, [fwd] [return] [Mcg.CodeGen.Win32HandleMarshaller] PInvoke_Kernel32_SafeFindFilesHandle__PInvoke_Kernel32____w64 int, [fwd] [in] [Mcg.CodeGen.AnsiStringMarshaller] string__unsigned char *, [fwd] [in] [Mcg.CodeGen.EnumMarshaller] PInvoke_Kernel32_FINDEX_INFO_LEVELS__PInvoke_Kernel32__Kernel32_FINDEX_INFO_LEVELS__PInvoke_Kernel32, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.StructMarshaller] PInvoke_Kernel32_WIN32_FIND_DATA__PInvoke_Kernel32__PInvoke__Kernel32_WIN32_FIND_DATA__PInvoke_Kernel32, [fwd] [in] [Mcg.CodeGen.EnumMarshaller] PInvoke_Kernel32_FINDEX_SEARCH_OPS__PInvoke_Kernel32__Kernel32_FINDEX_SEARCH_OPS__PInvoke_Kernel32, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] void___ptrvoid *, [fwd] [in] [Mcg.CodeGen.EnumMarshaller] PInvoke_Kernel32_FindFirstFileExFlags__PInvoke_Kernel32__Kernel32_FindFirstFileExFlags__PInvoke_Kernel32, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("PInvoke.Kernel32, Version=0.3.0.0, Culture=neutral, PublicKeyToken=9e300f9f87f04a7a", "PInvoke.Kernel32", "FindFirstFileEx")]
		public static global::PInvoke.Kernel32_SafeFindFilesHandle__PInvoke_Kernel32 FindFirstFileEx(
					string lpFileName, 
					global::PInvoke.Kernel32_FINDEX_INFO_LEVELS__PInvoke_Kernel32 fInfoLevelId, 
					out global::PInvoke.Kernel32_WIN32_FIND_DATA__PInvoke_Kernel32 lpFindFileData, 
					global::PInvoke.Kernel32_FINDEX_SEARCH_OPS__PInvoke_Kernel32 fSearchOp, 
					void* lpSearchFilter, 
					global::PInvoke.Kernel32_FindFirstFileExFlags__PInvoke_Kernel32 dwAdditionalFlags)
		{
			// Setup
			byte* unsafe_lpFileName = default(byte*);
			global::PInvoke.Kernel32_WIN32_FIND_DATA__PInvoke_Kernel32__Impl.UnsafeType unsafe_lpFindFileData = default(global::PInvoke.Kernel32_WIN32_FIND_DATA__PInvoke_Kernel32__Impl.UnsafeType);
			global::PInvoke.Kernel32_SafeFindFilesHandle__PInvoke_Kernel32 __value;
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				unsafe_lpFileName = global::System.Runtime.InteropServices.McgMarshal.StringToAnsiString(lpFileName, true, false);
				unsafe_lpFindFileData = default(global::PInvoke.Kernel32_WIN32_FIND_DATA__PInvoke_Kernel32__Impl.UnsafeType);
				__value = new global::PInvoke.Kernel32_SafeFindFilesHandle__PInvoke_Kernel32();
				// Call to native method
				unsafe___value = global::McgInterop.api_ms_win_core_file_l1_2_0_dll_PInvokes.FindFirstFileEx(
									unsafe_lpFileName, 
									fInfoLevelId, 
									&(unsafe_lpFindFileData), 
									fSearchOp, 
									((void*)lpSearchFilter), 
									dwAdditionalFlags
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				global::System.Runtime.InteropServices.McgMarshal.InitializeHandle(
									__value, 
									unsafe___value
								);
				global::PInvoke.Kernel32_WIN32_FIND_DATA__PInvoke_Kernel32__Impl.Marshal__UnsafeToSafe(
									ref unsafe_lpFindFileData, 
									out lpFindFileData
								);
				// Return
				return __value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_lpFileName);
			}
		}

		// Signature, ReadFile, [fwd] [return] [Mcg.CodeGen.Win32BoolMarshaller] bool__System.Boolean, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] PInvoke_Kernel32_SafeObjectHandle__PInvoke_Kernel32____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] void___ptrvoid *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int___ptrint *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] PInvoke_Kernel32_OVERLAPPED__PInvoke_Kernel32___ptrPInvoke__Kernel32_OVERLAPPED__PInvoke_Kernel32 *, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("PInvoke.Kernel32, Version=0.3.0.0, Culture=neutral, PublicKeyToken=9e300f9f87f04a7a", "PInvoke.Kernel32", "ReadFile")]
		public static bool ReadFile(
					global::PInvoke.Kernel32_SafeObjectHandle__PInvoke_Kernel32 hFile, 
					void* lpBuffer, 
					int nNumberOfBytesToRead, 
					int* lpNumberOfBytesRead, 
					global::PInvoke.Kernel32_OVERLAPPED__PInvoke_Kernel32* lpOverlapped)
		{
			// Setup
			bool addRefed = false;
			int unsafe___value;
			// Marshalling
			hFile.DangerousAddRef(ref addRefed);
			// Call to native method
			unsafe___value = global::McgInterop.api_ms_win_core_file_l1_2_0_dll_PInvokes.ReadFile(
								hFile.DangerousGetHandle(), 
								((void*)lpBuffer), 
								nNumberOfBytesToRead, 
								((int*)lpNumberOfBytesRead), 
								((global::PInvoke.Kernel32_OVERLAPPED__PInvoke_Kernel32*)lpOverlapped)
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			if (addRefed)
				hFile.DangerousRelease();
			// Return
			return unsafe___value != 0;
		}

		// Signature, WriteFile, [fwd] [return] [Mcg.CodeGen.Win32BoolMarshaller] bool__System.Boolean, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] PInvoke_Kernel32_SafeObjectHandle__PInvoke_Kernel32____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] void___ptrvoid *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int___ptrint *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] PInvoke_Kernel32_OVERLAPPED__PInvoke_Kernel32___ptrPInvoke__Kernel32_OVERLAPPED__PInvoke_Kernel32 *, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("PInvoke.Kernel32, Version=0.3.0.0, Culture=neutral, PublicKeyToken=9e300f9f87f04a7a", "PInvoke.Kernel32", "WriteFile")]
		public static bool WriteFile(
					global::PInvoke.Kernel32_SafeObjectHandle__PInvoke_Kernel32 hFile, 
					void* lpBuffer, 
					int nNumberOfBytesToWrite, 
					int* lpNumberOfBytesWritten, 
					global::PInvoke.Kernel32_OVERLAPPED__PInvoke_Kernel32* lpOverlapped)
		{
			// Setup
			bool addRefed = false;
			int unsafe___value;
			// Marshalling
			hFile.DangerousAddRef(ref addRefed);
			// Call to native method
			unsafe___value = global::McgInterop.api_ms_win_core_file_l1_2_0_dll_PInvokes.WriteFile(
								hFile.DangerousGetHandle(), 
								((void*)lpBuffer), 
								nNumberOfBytesToWrite, 
								((int*)lpNumberOfBytesWritten), 
								((global::PInvoke.Kernel32_OVERLAPPED__PInvoke_Kernel32*)lpOverlapped)
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			if (addRefed)
				hFile.DangerousRelease();
			// Return
			return unsafe___value != 0;
		}

		// Signature, FlushFileBuffers, [fwd] [return] [Mcg.CodeGen.Win32BoolMarshaller] bool__System.Boolean, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] PInvoke_Kernel32_SafeObjectHandle__PInvoke_Kernel32____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("PInvoke.Kernel32, Version=0.3.0.0, Culture=neutral, PublicKeyToken=9e300f9f87f04a7a", "PInvoke.Kernel32", "FlushFileBuffers")]
		public static bool FlushFileBuffers(global::PInvoke.Kernel32_SafeObjectHandle__PInvoke_Kernel32 hFile)
		{
			// Setup
			bool addRefed = false;
			int unsafe___value;
			// Marshalling
			hFile.DangerousAddRef(ref addRefed);
			// Call to native method
			unsafe___value = global::McgInterop.api_ms_win_core_file_l1_2_0_dll_PInvokes.FlushFileBuffers(hFile.DangerousGetHandle());
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			if (addRefed)
				hFile.DangerousRelease();
			// Return
			return unsafe___value != 0;
		}

		// Signature, FindClose, [fwd] [return] [Mcg.CodeGen.Win32BoolMarshaller] bool__System.Boolean, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("PInvoke.Kernel32, Version=0.3.0.0, Culture=neutral, PublicKeyToken=9e300f9f87f04a7a", "PInvoke.Kernel32", "FindClose")]
		public static bool FindClose(global::System.IntPtr hFindFile)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.api_ms_win_core_file_l1_2_0_dll_PInvokes.FindClose(hFindFile);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			// Return
			return unsafe___value != 0;
		}
	}

	/// <summary>
	/// P/Invoke class for module 'api-ms-win-core-localization-l1-2-0.dll'
	/// </summary>
	public unsafe static partial class api_ms_win_core_localization_l1_2_0_dll
	{
		// Signature, FormatMessage, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.EnumMarshaller] PInvoke_Kernel32_FormatMessageFlags__PInvoke_Kernel32__Kernel32_FormatMessageFlags__PInvoke_Kernel32, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] void___ptrvoid *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [out] [Mcg.CodeGen.StringBuilderMarshaller] System_Text_StringBuilder__wchar_t *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_System_IntPtr____w64 int *, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("PInvoke.Kernel32, Version=0.3.0.0, Culture=neutral, PublicKeyToken=9e300f9f87f04a7a", "PInvoke.Kernel32", "FormatMessage")]
		public static int FormatMessage(
					global::PInvoke.Kernel32_FormatMessageFlags__PInvoke_Kernel32 dwFlags, 
					void* lpSource, 
					int dwMessageId, 
					int dwLanguageId, 
					global::System.Text.StringBuilder lpBuffer, 
					int nSize, 
					global::System.IntPtr[] Arguments)
		{
			// Setup
			ushort* unsafe_lpBuffer = default(ushort*);
			global::System.IntPtr* unsafe_Arguments;
			int unsafe___value;
			try
			{
				// Marshalling
				if (lpBuffer == null)
					unsafe_lpBuffer = null;
				else
				{
					unsafe_lpBuffer = (ushort*)global::McgInterop.McgHelpers.CoTaskMemAllocAndZeroMemory(new global::System.IntPtr(checked(lpBuffer.Capacity * 2 
										+ 2)));
					if (unsafe_lpBuffer == null)
						throw new global::System.OutOfMemoryException();
				}
				if (unsafe_lpBuffer != null)
					global::System.Runtime.InteropServices.McgMarshal.StringBuilderToUnicodeString(
										lpBuffer, 
										unsafe_lpBuffer
									);
				fixed (global::System.IntPtr* pinned_Arguments = global::McgInterop.McgCoreHelpers.GetArrayForCompat(Arguments))
				{
					unsafe_Arguments = (global::System.IntPtr*)pinned_Arguments;
					// Call to native method
					unsafe___value = global::McgInterop.api_ms_win_core_localization_l1_2_0_dll_PInvokes.FormatMessage(
										dwFlags, 
										((void*)lpSource), 
										dwMessageId, 
										dwLanguageId, 
										unsafe_lpBuffer, 
										nSize, 
										unsafe_Arguments
									);
					global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
					global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
				}
				if (lpBuffer != null)
					global::System.Runtime.InteropServices.McgMarshal.UnicodeStringToStringBuilder(
										unsafe_lpBuffer, 
										lpBuffer
									);
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				if (unsafe_lpBuffer != null)
					global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_lpBuffer);
			}
		}

		// Signature, IsValidLocaleName, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] char___ptrwchar_t *, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Private.WinRTInterop.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089", "mincore+mincore_PInvokes", "IsValidLocaleName")]
		public static int IsValidLocaleName(char* lpLocaleName)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.api_ms_win_core_localization_l1_2_0_dll_PInvokes.IsValidLocaleName(((ushort*)lpLocaleName));
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, ResolveLocaleName, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] char___ptrwchar_t *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] char___ptrwchar_t *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Private.WinRTInterop.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089", "mincore+mincore_PInvokes", "ResolveLocaleName")]
		public static int ResolveLocaleName(
					char* lpNameToResolve, 
					char* lpLocaleName, 
					int cchLocaleName)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.api_ms_win_core_localization_l1_2_0_dll_PInvokes.ResolveLocaleName(
								((ushort*)lpNameToResolve), 
								((ushort*)lpLocaleName), 
								cchLocaleName
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, GetCPInfoExW, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] uint__unsigned int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] uint__unsigned int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] Interop_mincore_CPINFOEXW__System_Text_Encoding_CodePages___ptr__Interop_mincore_CPINFOEXW__System_Text_Encoding_CodePages *, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Text.Encoding.CodePages, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+mincore", "GetCPInfoExW")]
		public static int GetCPInfoExW(
					uint CodePage, 
					uint dwFlags, 
					global::Interop_mincore_CPINFOEXW__System_Text_Encoding_CodePages* lpCPInfoEx)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.api_ms_win_core_localization_l1_2_0_dll_PInvokes.GetCPInfoExW(
								CodePage, 
								dwFlags, 
								((global::Interop_mincore_CPINFOEXW__System_Text_Encoding_CodePages*)lpCPInfoEx)
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}
	}

	/// <summary>
	/// P/Invoke class for module 'api-ms-win-core-processthreads-l1-1-1.dll'
	/// </summary>
	public unsafe static partial class api_ms_win_core_processthreads_l1_1_1_dll
	{
		// Signature, GetCurrentThreadId, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("PInvoke.Kernel32, Version=0.3.0.0, Culture=neutral, PublicKeyToken=9e300f9f87f04a7a", "PInvoke.Kernel32", "GetCurrentThreadId")]
		public static int GetCurrentThreadId()
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.api_ms_win_core_processthreads_l1_1_1_dll_PInvokes.GetCurrentThreadId();
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, GetCurrentProcessId, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("PInvoke.Kernel32, Version=0.3.0.0, Culture=neutral, PublicKeyToken=9e300f9f87f04a7a", "PInvoke.Kernel32", "GetCurrentProcessId")]
		public static int GetCurrentProcessId()
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.api_ms_win_core_processthreads_l1_1_1_dll_PInvokes.GetCurrentProcessId();
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, GetCurrentProcess, [fwd] [return] [Mcg.CodeGen.Win32HandleMarshaller] PInvoke_Kernel32_SafeObjectHandle__PInvoke_Kernel32____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("PInvoke.Kernel32, Version=0.3.0.0, Culture=neutral, PublicKeyToken=9e300f9f87f04a7a", "PInvoke.Kernel32", "GetCurrentProcess")]
		public static global::PInvoke.Kernel32_SafeObjectHandle__PInvoke_Kernel32 GetCurrentProcess()
		{
			// Setup
			global::PInvoke.Kernel32_SafeObjectHandle__PInvoke_Kernel32 __value;
			global::System.IntPtr unsafe___value;
			// Marshalling
			__value = new global::PInvoke.Kernel32_SafeObjectHandle__PInvoke_Kernel32();
			// Call to native method
			unsafe___value = global::McgInterop.api_ms_win_core_processthreads_l1_1_1_dll_PInvokes.GetCurrentProcess();
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			global::System.Runtime.InteropServices.McgMarshal.InitializeHandle(
								__value, 
								unsafe___value
							);
			// Return
			return __value;
		}

		// Signature, SuspendThread, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] PInvoke_Kernel32_SafeObjectHandle__PInvoke_Kernel32____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("PInvoke.Kernel32, Version=0.3.0.0, Culture=neutral, PublicKeyToken=9e300f9f87f04a7a", "PInvoke.Kernel32", "SuspendThread")]
		public static int SuspendThread(global::PInvoke.Kernel32_SafeObjectHandle__PInvoke_Kernel32 hThread)
		{
			// Setup
			bool addRefed = false;
			int unsafe___value;
			// Marshalling
			hThread.DangerousAddRef(ref addRefed);
			// Call to native method
			unsafe___value = global::McgInterop.api_ms_win_core_processthreads_l1_1_1_dll_PInvokes.SuspendThread(hThread.DangerousGetHandle());
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			if (addRefed)
				hThread.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, ResumeThread, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] PInvoke_Kernel32_SafeObjectHandle__PInvoke_Kernel32____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("PInvoke.Kernel32, Version=0.3.0.0, Culture=neutral, PublicKeyToken=9e300f9f87f04a7a", "PInvoke.Kernel32", "ResumeThread")]
		public static int ResumeThread(global::PInvoke.Kernel32_SafeObjectHandle__PInvoke_Kernel32 hThread)
		{
			// Setup
			bool addRefed = false;
			int unsafe___value;
			// Marshalling
			hThread.DangerousAddRef(ref addRefed);
			// Call to native method
			unsafe___value = global::McgInterop.api_ms_win_core_processthreads_l1_1_1_dll_PInvokes.ResumeThread(hThread.DangerousGetHandle());
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			if (addRefed)
				hThread.DangerousRelease();
			// Return
			return unsafe___value;
		}
	}

	/// <summary>
	/// P/Invoke class for module 'api-ms-win-core-io-l1-1-1.dll'
	/// </summary>
	public unsafe static partial class api_ms_win_core_io_l1_1_1_dll
	{
		// Signature, CancelIoEx, [fwd] [return] [Mcg.CodeGen.Win32BoolMarshaller] bool__System.Boolean, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] PInvoke_Kernel32_SafeObjectHandle__PInvoke_Kernel32____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] PInvoke_Kernel32_OVERLAPPED__PInvoke_Kernel32___ptrPInvoke__Kernel32_OVERLAPPED__PInvoke_Kernel32 *, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("PInvoke.Kernel32, Version=0.3.0.0, Culture=neutral, PublicKeyToken=9e300f9f87f04a7a", "PInvoke.Kernel32", "CancelIoEx")]
		public static bool CancelIoEx(
					global::PInvoke.Kernel32_SafeObjectHandle__PInvoke_Kernel32 hFile, 
					global::PInvoke.Kernel32_OVERLAPPED__PInvoke_Kernel32* lpOverlapped)
		{
			// Setup
			bool addRefed = false;
			int unsafe___value;
			// Marshalling
			hFile.DangerousAddRef(ref addRefed);
			// Call to native method
			unsafe___value = global::McgInterop.api_ms_win_core_io_l1_1_1_dll_PInvokes.CancelIoEx(
								hFile.DangerousGetHandle(), 
								((global::PInvoke.Kernel32_OVERLAPPED__PInvoke_Kernel32*)lpOverlapped)
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			if (addRefed)
				hFile.DangerousRelease();
			// Return
			return unsafe___value != 0;
		}
	}

	/// <summary>
	/// P/Invoke class for module 'api-ms-win-core-synch-l1-2-0.dll'
	/// </summary>
	public unsafe static partial class api_ms_win_core_synch_l1_2_0_dll
	{
		// Signature, WaitForSingleObject, [fwd] [return] [Mcg.CodeGen.EnumMarshaller] PInvoke_Kernel32_WaitForSingleObjectResult__PInvoke_Kernel32__Kernel32_WaitForSingleObjectResult__PInvoke_Kernel32, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] System_Runtime_InteropServices_SafeHandle____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("PInvoke.Kernel32, Version=0.3.0.0, Culture=neutral, PublicKeyToken=9e300f9f87f04a7a", "PInvoke.Kernel32", "WaitForSingleObject")]
		public static global::PInvoke.Kernel32_WaitForSingleObjectResult__PInvoke_Kernel32 WaitForSingleObject(
					global::System.Runtime.InteropServices.SafeHandle hHandle, 
					int dwMilliseconds)
		{
			// Setup
			bool addRefed = false;
			global::PInvoke.Kernel32_WaitForSingleObjectResult__PInvoke_Kernel32 unsafe___value;
			// Marshalling
			hHandle.DangerousAddRef(ref addRefed);
			// Call to native method
			unsafe___value = global::McgInterop.api_ms_win_core_synch_l1_2_0_dll_PInvokes.WaitForSingleObject(
								hHandle.DangerousGetHandle(), 
								dwMilliseconds
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			if (addRefed)
				hHandle.DangerousRelease();
			// Return
			return unsafe___value;
		}
	}

	/// <summary>
	/// P/Invoke class for module 'api-ms-win-core-handle-l1-1-0.dll'
	/// </summary>
	public unsafe static partial class api_ms_win_core_handle_l1_1_0_dll
	{
		// Signature, CloseHandle, [fwd] [return] [Mcg.CodeGen.Win32BoolMarshaller] bool__System.Boolean, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("PInvoke.Kernel32, Version=0.3.0.0, Culture=neutral, PublicKeyToken=9e300f9f87f04a7a", "PInvoke.Kernel32", "CloseHandle")]
		public static bool CloseHandle(global::System.IntPtr hObject)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.api_ms_win_core_handle_l1_1_0_dll_PInvokes.CloseHandle(hObject);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			// Return
			return unsafe___value != 0;
		}
	}

	/// <summary>
	/// P/Invoke class for module 'NCrypt'
	/// </summary>
	public unsafe static partial class NCrypt
	{
		// Signature, NCryptOpenStorageProvider, [fwd] [return] [Mcg.CodeGen.EnumMarshaller] PInvoke_NCrypt_SECURITY_STATUS__PInvoke_NCrypt__NCrypt_SECURITY_STATUS__PInvoke_NCrypt, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.Win32HandleMarshaller] PInvoke_NCrypt_SafeProviderHandle__PInvoke_NCrypt____w64 int, [fwd] [in] [Mcg.CodeGen.UnicodeStringMarshaller] string__wchar_t *, [fwd] [in] [optional] [Mcg.CodeGen.EnumMarshaller] PInvoke_NCrypt_NCryptOpenStorageProviderFlags__PInvoke_NCrypt__NCrypt_NCryptOpenStorageProviderFlags__PInvoke_NCrypt, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("PInvoke.NCrypt, Version=0.3.0.0, Culture=neutral, PublicKeyToken=9e300f9f87f04a7a", "PInvoke.NCrypt", "NCryptOpenStorageProvider")]
		public static global::PInvoke.NCrypt_SECURITY_STATUS__PInvoke_NCrypt NCryptOpenStorageProvider(
					out global::PInvoke.NCrypt_SafeProviderHandle__PInvoke_NCrypt phProvider, 
					string pszProviderName, 
					global::PInvoke.NCrypt_NCryptOpenStorageProviderFlags__PInvoke_NCrypt dwFlags)
		{
			// Setup
			global::System.IntPtr unsafe_phProvider;
			ushort* unsafe_pszProviderName = default(ushort*);
			global::PInvoke.NCrypt_SECURITY_STATUS__PInvoke_NCrypt unsafe___value;
			// Marshalling
			phProvider = new global::PInvoke.NCrypt_SafeProviderHandle__PInvoke_NCrypt();
			unsafe_phProvider = phProvider.DangerousGetHandle();
			fixed (char* pinned_pszProviderName = pszProviderName)
			{
				unsafe_pszProviderName = (ushort*)pinned_pszProviderName;
				// Call to native method
				unsafe___value = global::McgInterop.NCrypt_PInvokes.NCryptOpenStorageProvider(
									&(unsafe_phProvider), 
									unsafe_pszProviderName, 
									dwFlags
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			}
			global::System.Runtime.InteropServices.McgMarshal.InitializeHandle(
								phProvider, 
								unsafe_phProvider
							);
			// Return
			return unsafe___value;
		}

		// Signature, NCryptCreatePersistedKey, [fwd] [return] [Mcg.CodeGen.EnumMarshaller] PInvoke_NCrypt_SECURITY_STATUS__PInvoke_NCrypt__NCrypt_SECURITY_STATUS__PInvoke_NCrypt, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] PInvoke_NCrypt_SafeProviderHandle__PInvoke_NCrypt____w64 int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.Win32HandleMarshaller] PInvoke_NCrypt_SafeKeyHandle__PInvoke_NCrypt____w64 int, [fwd] [in] [Mcg.CodeGen.UnicodeStringMarshaller] string__wchar_t *, [fwd] [in] [optional] [Mcg.CodeGen.UnicodeStringMarshaller] string__wchar_t *, [fwd] [in] [optional] [Mcg.CodeGen.EnumMarshaller] PInvoke_NCrypt_LegacyKeySpec__PInvoke_NCrypt__NCrypt_LegacyKeySpec__PInvoke_NCrypt, [fwd] [in] [optional] [Mcg.CodeGen.EnumMarshaller] PInvoke_NCrypt_NCryptCreatePersistedKeyFlags__PInvoke_NCrypt__NCrypt_NCryptCreatePersistedKeyFlags__PInvoke_NCrypt, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("PInvoke.NCrypt, Version=0.3.0.0, Culture=neutral, PublicKeyToken=9e300f9f87f04a7a", "PInvoke.NCrypt", "NCryptCreatePersistedKey")]
		public static global::PInvoke.NCrypt_SECURITY_STATUS__PInvoke_NCrypt NCryptCreatePersistedKey(
					global::PInvoke.NCrypt_SafeProviderHandle__PInvoke_NCrypt hProvider, 
					out global::PInvoke.NCrypt_SafeKeyHandle__PInvoke_NCrypt phKey, 
					string pszAlgId, 
					string pszKeyName, 
					global::PInvoke.NCrypt_LegacyKeySpec__PInvoke_NCrypt dwLegacyKeySpec, 
					global::PInvoke.NCrypt_NCryptCreatePersistedKeyFlags__PInvoke_NCrypt dwFlags)
		{
			// Setup
			bool addRefed = false;
			global::System.IntPtr unsafe_phKey;
			ushort* unsafe_pszAlgId = default(ushort*);
			ushort* unsafe_pszKeyName = default(ushort*);
			global::PInvoke.NCrypt_SECURITY_STATUS__PInvoke_NCrypt unsafe___value;
			// Marshalling
			hProvider.DangerousAddRef(ref addRefed);
			phKey = new global::PInvoke.NCrypt_SafeKeyHandle__PInvoke_NCrypt();
			unsafe_phKey = phKey.DangerousGetHandle();
			fixed (char* pinned_pszAlgId = pszAlgId)
			{
				unsafe_pszAlgId = (ushort*)pinned_pszAlgId;
				fixed (char* pinned_pszKeyName = pszKeyName)
				{
					unsafe_pszKeyName = (ushort*)pinned_pszKeyName;
					// Call to native method
					unsafe___value = global::McgInterop.NCrypt_PInvokes.NCryptCreatePersistedKey(
										hProvider.DangerousGetHandle(), 
										&(unsafe_phKey), 
										unsafe_pszAlgId, 
										unsafe_pszKeyName, 
										dwLegacyKeySpec, 
										dwFlags
									);
					global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				}
			}
			global::System.Runtime.InteropServices.McgMarshal.InitializeHandle(
								phKey, 
								unsafe_phKey
							);
			if (addRefed)
				hProvider.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, NCryptOpenKey, [fwd] [return] [Mcg.CodeGen.EnumMarshaller] PInvoke_NCrypt_SECURITY_STATUS__PInvoke_NCrypt__NCrypt_SECURITY_STATUS__PInvoke_NCrypt, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] PInvoke_NCrypt_SafeProviderHandle__PInvoke_NCrypt____w64 int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.Win32HandleMarshaller] PInvoke_NCrypt_SafeKeyHandle__PInvoke_NCrypt____w64 int, [fwd] [in] [Mcg.CodeGen.UnicodeStringMarshaller] string__wchar_t *, [fwd] [in] [Mcg.CodeGen.EnumMarshaller] PInvoke_NCrypt_LegacyKeySpec__PInvoke_NCrypt__NCrypt_LegacyKeySpec__PInvoke_NCrypt, [fwd] [in] [optional] [Mcg.CodeGen.EnumMarshaller] PInvoke_NCrypt_NCryptOpenKeyFlags__PInvoke_NCrypt__NCrypt_NCryptOpenKeyFlags__PInvoke_NCrypt, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("PInvoke.NCrypt, Version=0.3.0.0, Culture=neutral, PublicKeyToken=9e300f9f87f04a7a", "PInvoke.NCrypt", "NCryptOpenKey")]
		public static global::PInvoke.NCrypt_SECURITY_STATUS__PInvoke_NCrypt NCryptOpenKey(
					global::PInvoke.NCrypt_SafeProviderHandle__PInvoke_NCrypt hProvider, 
					out global::PInvoke.NCrypt_SafeKeyHandle__PInvoke_NCrypt phKey, 
					string pszKeyName, 
					global::PInvoke.NCrypt_LegacyKeySpec__PInvoke_NCrypt dwLegacyKeySpec, 
					global::PInvoke.NCrypt_NCryptOpenKeyFlags__PInvoke_NCrypt dwFlags)
		{
			// Setup
			bool addRefed = false;
			global::System.IntPtr unsafe_phKey;
			ushort* unsafe_pszKeyName = default(ushort*);
			global::PInvoke.NCrypt_SECURITY_STATUS__PInvoke_NCrypt unsafe___value;
			// Marshalling
			hProvider.DangerousAddRef(ref addRefed);
			phKey = new global::PInvoke.NCrypt_SafeKeyHandle__PInvoke_NCrypt();
			unsafe_phKey = phKey.DangerousGetHandle();
			fixed (char* pinned_pszKeyName = pszKeyName)
			{
				unsafe_pszKeyName = (ushort*)pinned_pszKeyName;
				// Call to native method
				unsafe___value = global::McgInterop.NCrypt_PInvokes.NCryptOpenKey(
									hProvider.DangerousGetHandle(), 
									&(unsafe_phKey), 
									unsafe_pszKeyName, 
									dwLegacyKeySpec, 
									dwFlags
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			}
			global::System.Runtime.InteropServices.McgMarshal.InitializeHandle(
								phKey, 
								unsafe_phKey
							);
			if (addRefed)
				hProvider.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, NCryptDeleteKey, [fwd] [return] [Mcg.CodeGen.EnumMarshaller] PInvoke_NCrypt_SECURITY_STATUS__PInvoke_NCrypt__NCrypt_SECURITY_STATUS__PInvoke_NCrypt, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] PInvoke_NCrypt_SafeKeyHandle__PInvoke_NCrypt____w64 int, [fwd] [in] [optional] [Mcg.CodeGen.EnumMarshaller] PInvoke_NCrypt_NCryptDeleteKeyFlags__PInvoke_NCrypt__NCrypt_NCryptDeleteKeyFlags__PInvoke_NCrypt, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("PInvoke.NCrypt, Version=0.3.0.0, Culture=neutral, PublicKeyToken=9e300f9f87f04a7a", "PInvoke.NCrypt", "NCryptDeleteKey")]
		public static global::PInvoke.NCrypt_SECURITY_STATUS__PInvoke_NCrypt NCryptDeleteKey(
					global::PInvoke.NCrypt_SafeKeyHandle__PInvoke_NCrypt hKey, 
					global::PInvoke.NCrypt_NCryptDeleteKeyFlags__PInvoke_NCrypt dwFlags)
		{
			// Setup
			bool addRefed = false;
			global::PInvoke.NCrypt_SECURITY_STATUS__PInvoke_NCrypt unsafe___value;
			// Marshalling
			hKey.DangerousAddRef(ref addRefed);
			// Call to native method
			unsafe___value = global::McgInterop.NCrypt_PInvokes.NCryptDeleteKey(
								hKey.DangerousGetHandle(), 
								dwFlags
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			if (addRefed)
				hKey.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, NCryptSecretAgreement, [fwd] [return] [Mcg.CodeGen.EnumMarshaller] PInvoke_NCrypt_SECURITY_STATUS__PInvoke_NCrypt__NCrypt_SECURITY_STATUS__PInvoke_NCrypt, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] PInvoke_NCrypt_SafeKeyHandle__PInvoke_NCrypt____w64 int, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] PInvoke_NCrypt_SafeKeyHandle__PInvoke_NCrypt____w64 int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.Win32HandleMarshaller] PInvoke_NCrypt_SafeSecretHandle__PInvoke_NCrypt____w64 int, [fwd] [in] [optional] [Mcg.CodeGen.EnumMarshaller] PInvoke_NCrypt_NCryptSecretAgreementFlags__PInvoke_NCrypt__NCrypt_NCryptSecretAgreementFlags__PInvoke_NCrypt, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("PInvoke.NCrypt, Version=0.3.0.0, Culture=neutral, PublicKeyToken=9e300f9f87f04a7a", "PInvoke.NCrypt", "NCryptSecretAgreement")]
		public static global::PInvoke.NCrypt_SECURITY_STATUS__PInvoke_NCrypt NCryptSecretAgreement(
					global::PInvoke.NCrypt_SafeKeyHandle__PInvoke_NCrypt hPrivKey, 
					global::PInvoke.NCrypt_SafeKeyHandle__PInvoke_NCrypt hPubKey, 
					out global::PInvoke.NCrypt_SafeSecretHandle__PInvoke_NCrypt phSecret, 
					global::PInvoke.NCrypt_NCryptSecretAgreementFlags__PInvoke_NCrypt dwFlags)
		{
			// Setup
			bool addRefed = false;
			bool addRefed_1 = false;
			global::System.IntPtr unsafe_phSecret;
			global::PInvoke.NCrypt_SECURITY_STATUS__PInvoke_NCrypt unsafe___value;
			// Marshalling
			hPrivKey.DangerousAddRef(ref addRefed);
			hPubKey.DangerousAddRef(ref addRefed_1);
			phSecret = new global::PInvoke.NCrypt_SafeSecretHandle__PInvoke_NCrypt();
			unsafe_phSecret = phSecret.DangerousGetHandle();
			// Call to native method
			unsafe___value = global::McgInterop.NCrypt_PInvokes.NCryptSecretAgreement(
								hPrivKey.DangerousGetHandle(), 
								hPubKey.DangerousGetHandle(), 
								&(unsafe_phSecret), 
								dwFlags
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			global::System.Runtime.InteropServices.McgMarshal.InitializeHandle(
								phSecret, 
								unsafe_phSecret
							);
			if (addRefed_1)
				hPubKey.DangerousRelease();
			if (addRefed)
				hPrivKey.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, NCryptKeyDerivation, [fwd] [return] [Mcg.CodeGen.EnumMarshaller] PInvoke_NCrypt_SECURITY_STATUS__PInvoke_NCrypt__NCrypt_SECURITY_STATUS__PInvoke_NCrypt, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] PInvoke_NCrypt_SafeKeyHandle__PInvoke_NCrypt____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] PInvoke_NCrypt_NCryptBufferDesc__PInvoke_NCrypt___ptrPInvoke__NCrypt_NCryptBufferDesc__PInvoke_NCrypt *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] byte___ptrunsigned char *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [optional] [Mcg.CodeGen.EnumMarshaller] PInvoke_NCrypt_NCryptKeyDerivationFlags__PInvoke_NCrypt__NCrypt_NCryptKeyDerivationFlags__PInvoke_NCrypt, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("PInvoke.NCrypt, Version=0.3.0.0, Culture=neutral, PublicKeyToken=9e300f9f87f04a7a", "PInvoke.NCrypt", "NCryptKeyDerivation")]
		public static global::PInvoke.NCrypt_SECURITY_STATUS__PInvoke_NCrypt NCryptKeyDerivation(
					global::PInvoke.NCrypt_SafeKeyHandle__PInvoke_NCrypt hKey, 
					global::PInvoke.NCrypt_NCryptBufferDesc__PInvoke_NCrypt* pParameterList, 
					byte* pbDerivedKey, 
					int cbDerivedKey, 
					out int pcbResult, 
					global::PInvoke.NCrypt_NCryptKeyDerivationFlags__PInvoke_NCrypt dwFlags)
		{
			// Setup
			bool addRefed = false;
			int unsafe_pcbResult;
			global::PInvoke.NCrypt_SECURITY_STATUS__PInvoke_NCrypt unsafe___value;
			// Marshalling
			hKey.DangerousAddRef(ref addRefed);
			// Call to native method
			unsafe___value = global::McgInterop.NCrypt_PInvokes.NCryptKeyDerivation(
								hKey.DangerousGetHandle(), 
								((global::PInvoke.NCrypt_NCryptBufferDesc__PInvoke_NCrypt*)pParameterList), 
								((byte*)pbDerivedKey), 
								cbDerivedKey, 
								&(unsafe_pcbResult), 
								dwFlags
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			pcbResult = unsafe_pcbResult;
			if (addRefed)
				hKey.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, NCryptDeriveKey, [fwd] [return] [Mcg.CodeGen.EnumMarshaller] PInvoke_NCrypt_SECURITY_STATUS__PInvoke_NCrypt__NCrypt_SECURITY_STATUS__PInvoke_NCrypt, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] PInvoke_NCrypt_SafeSecretHandle__PInvoke_NCrypt____w64 int, [fwd] [in] [Mcg.CodeGen.UnicodeStringMarshaller] string__wchar_t *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] PInvoke_NCrypt_NCryptBufferDesc__PInvoke_NCrypt___ptrPInvoke__NCrypt_NCryptBufferDesc__PInvoke_NCrypt *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] byte___ptrunsigned char *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [optional] [Mcg.CodeGen.EnumMarshaller] PInvoke_NCrypt_NCryptDeriveKeyFlags__PInvoke_NCrypt__NCrypt_NCryptDeriveKeyFlags__PInvoke_NCrypt, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("PInvoke.NCrypt, Version=0.3.0.0, Culture=neutral, PublicKeyToken=9e300f9f87f04a7a", "PInvoke.NCrypt", "NCryptDeriveKey")]
		public static global::PInvoke.NCrypt_SECURITY_STATUS__PInvoke_NCrypt NCryptDeriveKey(
					global::PInvoke.NCrypt_SafeSecretHandle__PInvoke_NCrypt hSharedSecret, 
					string pwszKDF, 
					global::PInvoke.NCrypt_NCryptBufferDesc__PInvoke_NCrypt* pParameterList, 
					byte* pbDerivedKey, 
					int cbDerivedKey, 
					out int pcbResult, 
					global::PInvoke.NCrypt_NCryptDeriveKeyFlags__PInvoke_NCrypt dwFlags)
		{
			// Setup
			bool addRefed = false;
			ushort* unsafe_pwszKDF = default(ushort*);
			int unsafe_pcbResult;
			global::PInvoke.NCrypt_SECURITY_STATUS__PInvoke_NCrypt unsafe___value;
			// Marshalling
			hSharedSecret.DangerousAddRef(ref addRefed);
			fixed (char* pinned_pwszKDF = pwszKDF)
			{
				unsafe_pwszKDF = (ushort*)pinned_pwszKDF;
				// Call to native method
				unsafe___value = global::McgInterop.NCrypt_PInvokes.NCryptDeriveKey(
									hSharedSecret.DangerousGetHandle(), 
									unsafe_pwszKDF, 
									((global::PInvoke.NCrypt_NCryptBufferDesc__PInvoke_NCrypt*)pParameterList), 
									((byte*)pbDerivedKey), 
									cbDerivedKey, 
									&(unsafe_pcbResult), 
									dwFlags
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				pcbResult = unsafe_pcbResult;
			}
			if (addRefed)
				hSharedSecret.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, NCryptEnumAlgorithms, [fwd] [return] [Mcg.CodeGen.EnumMarshaller] PInvoke_NCrypt_SECURITY_STATUS__PInvoke_NCrypt__NCrypt_SECURITY_STATUS__PInvoke_NCrypt, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] PInvoke_NCrypt_SafeProviderHandle__PInvoke_NCrypt____w64 int, [fwd] [in] [Mcg.CodeGen.EnumMarshaller] PInvoke_NCrypt_AlgorithmOperations__PInvoke_NCrypt__NCrypt_AlgorithmOperations__PInvoke_NCrypt, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableValueMarshaller] PInvoke_NCrypt_NCryptAlgorithmName__PInvoke_NCrypt___ptrPInvoke__NCrypt_NCryptAlgorithmName__PInvoke_NCrypt *, [fwd] [in] [optional] [Mcg.CodeGen.EnumMarshaller] PInvoke_NCrypt_NCryptEnumAlgorithmsFlags__PInvoke_NCrypt__NCrypt_NCryptEnumAlgorithmsFlags__PInvoke_NCrypt, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("PInvoke.NCrypt, Version=0.3.0.0, Culture=neutral, PublicKeyToken=9e300f9f87f04a7a", "PInvoke.NCrypt", "NCryptEnumAlgorithms")]
		public static global::PInvoke.NCrypt_SECURITY_STATUS__PInvoke_NCrypt NCryptEnumAlgorithms(
					global::PInvoke.NCrypt_SafeProviderHandle__PInvoke_NCrypt hProvider, 
					global::PInvoke.NCrypt_AlgorithmOperations__PInvoke_NCrypt dwAlgOperations, 
					out int pdwAlgCount, 
					out global::PInvoke.NCrypt_NCryptAlgorithmName__PInvoke_NCrypt* ppAlgList, 
					global::PInvoke.NCrypt_NCryptEnumAlgorithmsFlags__PInvoke_NCrypt dwFlags)
		{
			// Setup
			bool addRefed = false;
			int unsafe_pdwAlgCount;
			global::PInvoke.NCrypt_NCryptAlgorithmName__PInvoke_NCrypt* unsafe_ppAlgList;
			global::PInvoke.NCrypt_SECURITY_STATUS__PInvoke_NCrypt unsafe___value;
			// Marshalling
			hProvider.DangerousAddRef(ref addRefed);
			// Call to native method
			unsafe___value = global::McgInterop.NCrypt_PInvokes.NCryptEnumAlgorithms(
								hProvider.DangerousGetHandle(), 
								dwAlgOperations, 
								&(unsafe_pdwAlgCount), 
								&(unsafe_ppAlgList), 
								dwFlags
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			ppAlgList = (global::PInvoke.NCrypt_NCryptAlgorithmName__PInvoke_NCrypt*)unsafe_ppAlgList;
			pdwAlgCount = unsafe_pdwAlgCount;
			if (addRefed)
				hProvider.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, NCryptEnumKeys, [fwd] [return] [Mcg.CodeGen.EnumMarshaller] PInvoke_NCrypt_SECURITY_STATUS__PInvoke_NCrypt__NCrypt_SECURITY_STATUS__PInvoke_NCrypt, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] PInvoke_NCrypt_SafeProviderHandle__PInvoke_NCrypt____w64 int, [fwd] [in] [Mcg.CodeGen.UnicodeStringMarshaller] string__wchar_t *, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableValueMarshaller] PInvoke_NCrypt_NCryptKeyName__PInvoke_NCrypt___ptrPInvoke__NCrypt_NCryptKeyName__PInvoke_NCrypt *, [fwd] [in] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableValueMarshaller] void___ptrvoid *, [fwd] [in] [optional] [Mcg.CodeGen.EnumMarshaller] PInvoke_NCrypt_NCryptEnumKeysFlags__PInvoke_NCrypt__NCrypt_NCryptEnumKeysFlags__PInvoke_NCrypt, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("PInvoke.NCrypt, Version=0.3.0.0, Culture=neutral, PublicKeyToken=9e300f9f87f04a7a", "PInvoke.NCrypt", "NCryptEnumKeys")]
		public static global::PInvoke.NCrypt_SECURITY_STATUS__PInvoke_NCrypt NCryptEnumKeys(
					global::PInvoke.NCrypt_SafeProviderHandle__PInvoke_NCrypt hProvider, 
					string pszScope, 
					out global::PInvoke.NCrypt_NCryptKeyName__PInvoke_NCrypt* ppKeyName, 
					ref void* ppEnumState, 
					global::PInvoke.NCrypt_NCryptEnumKeysFlags__PInvoke_NCrypt dwFlags)
		{
			// Setup
			bool addRefed = false;
			ushort* unsafe_pszScope = default(ushort*);
			global::PInvoke.NCrypt_NCryptKeyName__PInvoke_NCrypt* unsafe_ppKeyName;
			void* unsafe_ppEnumState;
			global::PInvoke.NCrypt_SECURITY_STATUS__PInvoke_NCrypt unsafe___value;
			// Marshalling
			hProvider.DangerousAddRef(ref addRefed);
			fixed (char* pinned_pszScope = pszScope)
			{
				unsafe_pszScope = (ushort*)pinned_pszScope;
				unsafe_ppEnumState = (void*)ppEnumState;
				// Call to native method
				unsafe___value = global::McgInterop.NCrypt_PInvokes.NCryptEnumKeys(
									hProvider.DangerousGetHandle(), 
									unsafe_pszScope, 
									&(unsafe_ppKeyName), 
									&(unsafe_ppEnumState), 
									dwFlags
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				ppEnumState = (void*)unsafe_ppEnumState;
				ppKeyName = (global::PInvoke.NCrypt_NCryptKeyName__PInvoke_NCrypt*)unsafe_ppKeyName;
			}
			if (addRefed)
				hProvider.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, NCryptIsAlgSupported, [fwd] [return] [Mcg.CodeGen.EnumMarshaller] PInvoke_NCrypt_SECURITY_STATUS__PInvoke_NCrypt__NCrypt_SECURITY_STATUS__PInvoke_NCrypt, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] PInvoke_NCrypt_SafeProviderHandle__PInvoke_NCrypt____w64 int, [fwd] [in] [Mcg.CodeGen.UnicodeStringMarshaller] string__wchar_t *, [fwd] [in] [optional] [Mcg.CodeGen.EnumMarshaller] PInvoke_NCrypt_NCryptIsAlgSupportedFlags__PInvoke_NCrypt__NCrypt_NCryptIsAlgSupportedFlags__PInvoke_NCrypt, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("PInvoke.NCrypt, Version=0.3.0.0, Culture=neutral, PublicKeyToken=9e300f9f87f04a7a", "PInvoke.NCrypt", "NCryptIsAlgSupported")]
		public static global::PInvoke.NCrypt_SECURITY_STATUS__PInvoke_NCrypt NCryptIsAlgSupported(
					global::PInvoke.NCrypt_SafeProviderHandle__PInvoke_NCrypt hProvider, 
					string pszAlgId, 
					global::PInvoke.NCrypt_NCryptIsAlgSupportedFlags__PInvoke_NCrypt dwFlags)
		{
			// Setup
			bool addRefed = false;
			ushort* unsafe_pszAlgId = default(ushort*);
			global::PInvoke.NCrypt_SECURITY_STATUS__PInvoke_NCrypt unsafe___value;
			// Marshalling
			hProvider.DangerousAddRef(ref addRefed);
			fixed (char* pinned_pszAlgId = pszAlgId)
			{
				unsafe_pszAlgId = (ushort*)pinned_pszAlgId;
				// Call to native method
				unsafe___value = global::McgInterop.NCrypt_PInvokes.NCryptIsAlgSupported(
									hProvider.DangerousGetHandle(), 
									unsafe_pszAlgId, 
									dwFlags
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			}
			if (addRefed)
				hProvider.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, NCryptFinalizeKey, [fwd] [return] [Mcg.CodeGen.EnumMarshaller] PInvoke_NCrypt_SECURITY_STATUS__PInvoke_NCrypt__NCrypt_SECURITY_STATUS__PInvoke_NCrypt, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] PInvoke_NCrypt_SafeKeyHandle__PInvoke_NCrypt____w64 int, [fwd] [in] [optional] [Mcg.CodeGen.EnumMarshaller] PInvoke_NCrypt_NCryptFinalizeKeyFlags__PInvoke_NCrypt__NCrypt_NCryptFinalizeKeyFlags__PInvoke_NCrypt, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("PInvoke.NCrypt, Version=0.3.0.0, Culture=neutral, PublicKeyToken=9e300f9f87f04a7a", "PInvoke.NCrypt", "NCryptFinalizeKey")]
		public static global::PInvoke.NCrypt_SECURITY_STATUS__PInvoke_NCrypt NCryptFinalizeKey(
					global::PInvoke.NCrypt_SafeKeyHandle__PInvoke_NCrypt hKey, 
					global::PInvoke.NCrypt_NCryptFinalizeKeyFlags__PInvoke_NCrypt dwFlags)
		{
			// Setup
			bool addRefed = false;
			global::PInvoke.NCrypt_SECURITY_STATUS__PInvoke_NCrypt unsafe___value;
			// Marshalling
			hKey.DangerousAddRef(ref addRefed);
			// Call to native method
			unsafe___value = global::McgInterop.NCrypt_PInvokes.NCryptFinalizeKey(
								hKey.DangerousGetHandle(), 
								dwFlags
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			if (addRefed)
				hKey.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, NCryptExportKey, [fwd] [return] [Mcg.CodeGen.EnumMarshaller] PInvoke_NCrypt_SECURITY_STATUS__PInvoke_NCrypt__NCrypt_SECURITY_STATUS__PInvoke_NCrypt, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] PInvoke_NCrypt_SafeKeyHandle__PInvoke_NCrypt____w64 int, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] PInvoke_NCrypt_SafeKeyHandle__PInvoke_NCrypt____w64 int, [fwd] [in] [Mcg.CodeGen.UnicodeStringMarshaller] string__wchar_t *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] PInvoke_NCrypt_NCryptBufferDesc__PInvoke_NCrypt___ptrPInvoke__NCrypt_NCryptBufferDesc__PInvoke_NCrypt *, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_byte__unsigned char *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [optional] [Mcg.CodeGen.EnumMarshaller] PInvoke_NCrypt_NCryptExportKeyFlags__PInvoke_NCrypt__NCrypt_NCryptExportKeyFlags__PInvoke_NCrypt, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("PInvoke.NCrypt, Version=0.3.0.0, Culture=neutral, PublicKeyToken=9e300f9f87f04a7a", "PInvoke.NCrypt", "NCryptExportKey")]
		public static global::PInvoke.NCrypt_SECURITY_STATUS__PInvoke_NCrypt NCryptExportKey(
					global::PInvoke.NCrypt_SafeKeyHandle__PInvoke_NCrypt hKey, 
					global::PInvoke.NCrypt_SafeKeyHandle__PInvoke_NCrypt hExportKey, 
					string pszBlobType, 
					global::PInvoke.NCrypt_NCryptBufferDesc__PInvoke_NCrypt* pParameterList, 
					byte[] pbOutput, 
					int cbOutput, 
					out int pcbResult, 
					global::PInvoke.NCrypt_NCryptExportKeyFlags__PInvoke_NCrypt dwFlags)
		{
			// Setup
			bool addRefed = false;
			bool addRefed_1 = false;
			ushort* unsafe_pszBlobType = default(ushort*);
			byte* unsafe_pbOutput;
			int unsafe_pcbResult;
			global::PInvoke.NCrypt_SECURITY_STATUS__PInvoke_NCrypt unsafe___value;
			// Marshalling
			hKey.DangerousAddRef(ref addRefed);
			hExportKey.DangerousAddRef(ref addRefed_1);
			fixed (char* pinned_pszBlobType = pszBlobType)
			{
				unsafe_pszBlobType = (ushort*)pinned_pszBlobType;
				fixed (byte* pinned_pbOutput = global::McgInterop.McgCoreHelpers.GetArrayForCompat(pbOutput))
				{
					unsafe_pbOutput = (byte*)pinned_pbOutput;
					// Call to native method
					unsafe___value = global::McgInterop.NCrypt_PInvokes.NCryptExportKey(
										hKey.DangerousGetHandle(), 
										hExportKey.DangerousGetHandle(), 
										unsafe_pszBlobType, 
										((global::PInvoke.NCrypt_NCryptBufferDesc__PInvoke_NCrypt*)pParameterList), 
										unsafe_pbOutput, 
										cbOutput, 
										&(unsafe_pcbResult), 
										dwFlags
									);
					global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
					pcbResult = unsafe_pcbResult;
				}
			}
			if (addRefed_1)
				hExportKey.DangerousRelease();
			if (addRefed)
				hKey.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, NCryptImportKey, [fwd] [return] [Mcg.CodeGen.EnumMarshaller] PInvoke_NCrypt_SECURITY_STATUS__PInvoke_NCrypt__NCrypt_SECURITY_STATUS__PInvoke_NCrypt, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] PInvoke_NCrypt_SafeProviderHandle__PInvoke_NCrypt____w64 int, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] PInvoke_NCrypt_SafeKeyHandle__PInvoke_NCrypt____w64 int, [fwd] [in] [Mcg.CodeGen.UnicodeStringMarshaller] string__wchar_t *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] PInvoke_NCrypt_NCryptBufferDesc__PInvoke_NCrypt___ptrPInvoke__NCrypt_NCryptBufferDesc__PInvoke_NCrypt *, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.Win32HandleMarshaller] PInvoke_NCrypt_SafeKeyHandle__PInvoke_NCrypt____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] byte___ptrunsigned char *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [optional] [Mcg.CodeGen.EnumMarshaller] PInvoke_NCrypt_NCryptExportKeyFlags__PInvoke_NCrypt__NCrypt_NCryptExportKeyFlags__PInvoke_NCrypt, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("PInvoke.NCrypt, Version=0.3.0.0, Culture=neutral, PublicKeyToken=9e300f9f87f04a7a", "PInvoke.NCrypt", "NCryptImportKey")]
		public static global::PInvoke.NCrypt_SECURITY_STATUS__PInvoke_NCrypt NCryptImportKey(
					global::PInvoke.NCrypt_SafeProviderHandle__PInvoke_NCrypt hProvider, 
					global::PInvoke.NCrypt_SafeKeyHandle__PInvoke_NCrypt hImportKey, 
					string pszBlobType, 
					global::PInvoke.NCrypt_NCryptBufferDesc__PInvoke_NCrypt* pParameterList, 
					out global::PInvoke.NCrypt_SafeKeyHandle__PInvoke_NCrypt phKey, 
					byte* pbData, 
					int cbData, 
					global::PInvoke.NCrypt_NCryptExportKeyFlags__PInvoke_NCrypt dwFlags)
		{
			// Setup
			bool addRefed = false;
			bool addRefed_1 = false;
			ushort* unsafe_pszBlobType = default(ushort*);
			global::System.IntPtr unsafe_phKey;
			global::PInvoke.NCrypt_SECURITY_STATUS__PInvoke_NCrypt unsafe___value;
			// Marshalling
			hProvider.DangerousAddRef(ref addRefed);
			hImportKey.DangerousAddRef(ref addRefed_1);
			fixed (char* pinned_pszBlobType = pszBlobType)
			{
				unsafe_pszBlobType = (ushort*)pinned_pszBlobType;
				phKey = new global::PInvoke.NCrypt_SafeKeyHandle__PInvoke_NCrypt();
				unsafe_phKey = phKey.DangerousGetHandle();
				// Call to native method
				unsafe___value = global::McgInterop.NCrypt_PInvokes.NCryptImportKey(
									hProvider.DangerousGetHandle(), 
									hImportKey.DangerousGetHandle(), 
									unsafe_pszBlobType, 
									((global::PInvoke.NCrypt_NCryptBufferDesc__PInvoke_NCrypt*)pParameterList), 
									&(unsafe_phKey), 
									((byte*)pbData), 
									cbData, 
									dwFlags
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				global::System.Runtime.InteropServices.McgMarshal.InitializeHandle(
									phKey, 
									unsafe_phKey
								);
			}
			if (addRefed_1)
				hImportKey.DangerousRelease();
			if (addRefed)
				hProvider.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, NCryptGetProperty, [fwd] [return] [Mcg.CodeGen.EnumMarshaller] PInvoke_NCrypt_SECURITY_STATUS__PInvoke_NCrypt__NCrypt_SECURITY_STATUS__PInvoke_NCrypt, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] System_Runtime_InteropServices_SafeHandle____w64 int, [fwd] [in] [Mcg.CodeGen.UnicodeStringMarshaller] string__wchar_t *, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_byte__unsigned char *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.EnumMarshaller] PInvoke_NCrypt_NCryptGetPropertyFlags__PInvoke_NCrypt__NCrypt_NCryptGetPropertyFlags__PInvoke_NCrypt, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("PInvoke.NCrypt, Version=0.3.0.0, Culture=neutral, PublicKeyToken=9e300f9f87f04a7a", "PInvoke.NCrypt", "NCryptGetProperty")]
		public static global::PInvoke.NCrypt_SECURITY_STATUS__PInvoke_NCrypt NCryptGetProperty(
					global::System.Runtime.InteropServices.SafeHandle hObject, 
					string pszProperty, 
					byte[] pbOutput, 
					int cbOutput, 
					out int pcbResult, 
					global::PInvoke.NCrypt_NCryptGetPropertyFlags__PInvoke_NCrypt dwFlags)
		{
			// Setup
			bool addRefed = false;
			ushort* unsafe_pszProperty = default(ushort*);
			byte* unsafe_pbOutput;
			int unsafe_pcbResult = 0;
			global::PInvoke.NCrypt_SECURITY_STATUS__PInvoke_NCrypt unsafe___value;
			// Marshalling
			hObject.DangerousAddRef(ref addRefed);
			fixed (char* pinned_pszProperty = pszProperty)
			{
				unsafe_pszProperty = (ushort*)pinned_pszProperty;
				fixed (byte* pinned_pbOutput = global::McgInterop.McgCoreHelpers.GetArrayForCompat(pbOutput))
				{
					unsafe_pbOutput = (byte*)pinned_pbOutput;
					// Call to native method
					unsafe___value = global::McgInterop.NCrypt_PInvokes.NCryptGetProperty(
										hObject.DangerousGetHandle(), 
										unsafe_pszProperty, 
										unsafe_pbOutput, 
										cbOutput, 
										&(unsafe_pcbResult), 
										dwFlags
									);
					global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
					pcbResult = unsafe_pcbResult;
				}
			}
			if (addRefed)
				hObject.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, NCryptSetProperty, [fwd] [return] [Mcg.CodeGen.EnumMarshaller] PInvoke_NCrypt_SECURITY_STATUS__PInvoke_NCrypt__NCrypt_SECURITY_STATUS__PInvoke_NCrypt, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] System_Runtime_InteropServices_SafeHandle____w64 int, [fwd] [in] [Mcg.CodeGen.UnicodeStringMarshaller] string__wchar_t *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] byte___ptrunsigned char *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.EnumMarshaller] PInvoke_NCrypt_NCryptSetPropertyFlags__PInvoke_NCrypt__NCrypt_NCryptSetPropertyFlags__PInvoke_NCrypt, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("PInvoke.NCrypt, Version=0.3.0.0, Culture=neutral, PublicKeyToken=9e300f9f87f04a7a", "PInvoke.NCrypt", "NCryptSetProperty")]
		public static global::PInvoke.NCrypt_SECURITY_STATUS__PInvoke_NCrypt NCryptSetProperty(
					global::System.Runtime.InteropServices.SafeHandle hObject, 
					string pszProperty, 
					byte* pbInput, 
					int cbInput, 
					global::PInvoke.NCrypt_NCryptSetPropertyFlags__PInvoke_NCrypt dwFlags)
		{
			// Setup
			bool addRefed = false;
			ushort* unsafe_pszProperty = default(ushort*);
			global::PInvoke.NCrypt_SECURITY_STATUS__PInvoke_NCrypt unsafe___value;
			// Marshalling
			hObject.DangerousAddRef(ref addRefed);
			fixed (char* pinned_pszProperty = pszProperty)
			{
				unsafe_pszProperty = (ushort*)pinned_pszProperty;
				// Call to native method
				unsafe___value = global::McgInterop.NCrypt_PInvokes.NCryptSetProperty(
									hObject.DangerousGetHandle(), 
									unsafe_pszProperty, 
									((byte*)pbInput), 
									cbInput, 
									dwFlags
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			}
			if (addRefed)
				hObject.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, NCryptSetProperty__0, [fwd] [return] [Mcg.CodeGen.EnumMarshaller] PInvoke_NCrypt_SECURITY_STATUS__PInvoke_NCrypt__NCrypt_SECURITY_STATUS__PInvoke_NCrypt, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] System_Runtime_InteropServices_SafeHandle____w64 int, [fwd] [in] [Mcg.CodeGen.UnicodeStringMarshaller] string__wchar_t *, [fwd] [in] [Mcg.CodeGen.UnicodeStringMarshaller] string__wchar_t *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.EnumMarshaller] PInvoke_NCrypt_NCryptSetPropertyFlags__PInvoke_NCrypt__NCrypt_NCryptSetPropertyFlags__PInvoke_NCrypt, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("PInvoke.NCrypt, Version=0.3.0.0, Culture=neutral, PublicKeyToken=9e300f9f87f04a7a", "PInvoke.NCrypt", "NCryptSetProperty")]
		public static global::PInvoke.NCrypt_SECURITY_STATUS__PInvoke_NCrypt NCryptSetProperty__0(
					global::System.Runtime.InteropServices.SafeHandle hObject, 
					string pszProperty, 
					string pbInput, 
					int cbInput, 
					global::PInvoke.NCrypt_NCryptSetPropertyFlags__PInvoke_NCrypt dwFlags)
		{
			// Setup
			bool addRefed = false;
			ushort* unsafe_pszProperty = default(ushort*);
			ushort* unsafe_pbInput = default(ushort*);
			global::PInvoke.NCrypt_SECURITY_STATUS__PInvoke_NCrypt unsafe___value;
			// Marshalling
			hObject.DangerousAddRef(ref addRefed);
			fixed (char* pinned_pszProperty = pszProperty)
			{
				unsafe_pszProperty = (ushort*)pinned_pszProperty;
				fixed (char* pinned_pbInput = pbInput)
				{
					unsafe_pbInput = (ushort*)pinned_pbInput;
					// Call to native method
					unsafe___value = global::McgInterop.NCrypt_PInvokes.NCryptSetProperty__0(
										hObject.DangerousGetHandle(), 
										unsafe_pszProperty, 
										unsafe_pbInput, 
										cbInput, 
										dwFlags
									);
					global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				}
			}
			if (addRefed)
				hObject.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, NCryptEncrypt, [fwd] [return] [Mcg.CodeGen.EnumMarshaller] PInvoke_NCrypt_SECURITY_STATUS__PInvoke_NCrypt__NCrypt_SECURITY_STATUS__PInvoke_NCrypt, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] PInvoke_NCrypt_SafeKeyHandle__PInvoke_NCrypt____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] byte___ptrunsigned char *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] void___ptrvoid *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] byte___ptrunsigned char *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [optional] [Mcg.CodeGen.EnumMarshaller] PInvoke_NCrypt_NCryptEncryptFlags__PInvoke_NCrypt__NCrypt_NCryptEncryptFlags__PInvoke_NCrypt, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("PInvoke.NCrypt, Version=0.3.0.0, Culture=neutral, PublicKeyToken=9e300f9f87f04a7a", "PInvoke.NCrypt", "NCryptEncrypt")]
		public static global::PInvoke.NCrypt_SECURITY_STATUS__PInvoke_NCrypt NCryptEncrypt(
					global::PInvoke.NCrypt_SafeKeyHandle__PInvoke_NCrypt hKey, 
					byte* pbInput, 
					int cbInput, 
					void* pPaddingInfo, 
					byte* pbOutput, 
					int cbOutput, 
					out int pcbResult, 
					global::PInvoke.NCrypt_NCryptEncryptFlags__PInvoke_NCrypt dwFlags)
		{
			// Setup
			bool addRefed = false;
			int unsafe_pcbResult;
			global::PInvoke.NCrypt_SECURITY_STATUS__PInvoke_NCrypt unsafe___value;
			// Marshalling
			hKey.DangerousAddRef(ref addRefed);
			// Call to native method
			unsafe___value = global::McgInterop.NCrypt_PInvokes.NCryptEncrypt(
								hKey.DangerousGetHandle(), 
								((byte*)pbInput), 
								cbInput, 
								((void*)pPaddingInfo), 
								((byte*)pbOutput), 
								cbOutput, 
								&(unsafe_pcbResult), 
								dwFlags
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			pcbResult = unsafe_pcbResult;
			if (addRefed)
				hKey.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, NCryptDecrypt, [fwd] [return] [Mcg.CodeGen.EnumMarshaller] PInvoke_NCrypt_SECURITY_STATUS__PInvoke_NCrypt__NCrypt_SECURITY_STATUS__PInvoke_NCrypt, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] PInvoke_NCrypt_SafeKeyHandle__PInvoke_NCrypt____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] byte___ptrunsigned char *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] void___ptrvoid *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] byte___ptrunsigned char *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.EnumMarshaller] PInvoke_NCrypt_NCryptEncryptFlags__PInvoke_NCrypt__NCrypt_NCryptEncryptFlags__PInvoke_NCrypt, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("PInvoke.NCrypt, Version=0.3.0.0, Culture=neutral, PublicKeyToken=9e300f9f87f04a7a", "PInvoke.NCrypt", "NCryptDecrypt")]
		public static global::PInvoke.NCrypt_SECURITY_STATUS__PInvoke_NCrypt NCryptDecrypt(
					global::PInvoke.NCrypt_SafeKeyHandle__PInvoke_NCrypt hKey, 
					byte* pbInput, 
					int cbInput, 
					void* pPaddingInfo, 
					byte* pbOutput, 
					int cbOutput, 
					out int pcbResult, 
					global::PInvoke.NCrypt_NCryptEncryptFlags__PInvoke_NCrypt dwFlags)
		{
			// Setup
			bool addRefed = false;
			int unsafe_pcbResult;
			global::PInvoke.NCrypt_SECURITY_STATUS__PInvoke_NCrypt unsafe___value;
			// Marshalling
			hKey.DangerousAddRef(ref addRefed);
			// Call to native method
			unsafe___value = global::McgInterop.NCrypt_PInvokes.NCryptDecrypt(
								hKey.DangerousGetHandle(), 
								((byte*)pbInput), 
								cbInput, 
								((void*)pPaddingInfo), 
								((byte*)pbOutput), 
								cbOutput, 
								&(unsafe_pcbResult), 
								dwFlags
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			pcbResult = unsafe_pcbResult;
			if (addRefed)
				hKey.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, NCryptSignHash, [fwd] [return] [Mcg.CodeGen.EnumMarshaller] PInvoke_NCrypt_SECURITY_STATUS__PInvoke_NCrypt__NCrypt_SECURITY_STATUS__PInvoke_NCrypt, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] PInvoke_NCrypt_SafeKeyHandle__PInvoke_NCrypt____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] void___ptrvoid *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] byte___ptrunsigned char *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] byte___ptrunsigned char *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.EnumMarshaller] PInvoke_NCrypt_NCryptSignHashFlags__PInvoke_NCrypt__NCrypt_NCryptSignHashFlags__PInvoke_NCrypt, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("PInvoke.NCrypt, Version=0.3.0.0, Culture=neutral, PublicKeyToken=9e300f9f87f04a7a", "PInvoke.NCrypt", "NCryptSignHash")]
		public static global::PInvoke.NCrypt_SECURITY_STATUS__PInvoke_NCrypt NCryptSignHash(
					global::PInvoke.NCrypt_SafeKeyHandle__PInvoke_NCrypt hKey, 
					void* pPaddingInfo, 
					byte* pbHashValue, 
					int cbHashValue, 
					byte* pbSignature, 
					int cbSignature, 
					out int pcbResult, 
					global::PInvoke.NCrypt_NCryptSignHashFlags__PInvoke_NCrypt dwFlags)
		{
			// Setup
			bool addRefed = false;
			int unsafe_pcbResult;
			global::PInvoke.NCrypt_SECURITY_STATUS__PInvoke_NCrypt unsafe___value;
			// Marshalling
			hKey.DangerousAddRef(ref addRefed);
			// Call to native method
			unsafe___value = global::McgInterop.NCrypt_PInvokes.NCryptSignHash(
								hKey.DangerousGetHandle(), 
								((void*)pPaddingInfo), 
								((byte*)pbHashValue), 
								cbHashValue, 
								((byte*)pbSignature), 
								cbSignature, 
								&(unsafe_pcbResult), 
								dwFlags
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			pcbResult = unsafe_pcbResult;
			if (addRefed)
				hKey.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, NCryptVerifySignature, [fwd] [return] [Mcg.CodeGen.EnumMarshaller] PInvoke_NCrypt_SECURITY_STATUS__PInvoke_NCrypt__NCrypt_SECURITY_STATUS__PInvoke_NCrypt, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] PInvoke_NCrypt_SafeKeyHandle__PInvoke_NCrypt____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] void___ptrvoid *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] byte___ptrunsigned char *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] byte___ptrunsigned char *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [optional] [Mcg.CodeGen.EnumMarshaller] PInvoke_NCrypt_NCryptSignHashFlags__PInvoke_NCrypt__NCrypt_NCryptSignHashFlags__PInvoke_NCrypt, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("PInvoke.NCrypt, Version=0.3.0.0, Culture=neutral, PublicKeyToken=9e300f9f87f04a7a", "PInvoke.NCrypt", "NCryptVerifySignature")]
		public static global::PInvoke.NCrypt_SECURITY_STATUS__PInvoke_NCrypt NCryptVerifySignature(
					global::PInvoke.NCrypt_SafeKeyHandle__PInvoke_NCrypt hKey, 
					void* pPaddingInfo, 
					byte* pbHashValue, 
					int cbHashValue, 
					byte* pbSignature, 
					int cbSignature, 
					global::PInvoke.NCrypt_NCryptSignHashFlags__PInvoke_NCrypt dwFlags)
		{
			// Setup
			bool addRefed = false;
			global::PInvoke.NCrypt_SECURITY_STATUS__PInvoke_NCrypt unsafe___value;
			// Marshalling
			hKey.DangerousAddRef(ref addRefed);
			// Call to native method
			unsafe___value = global::McgInterop.NCrypt_PInvokes.NCryptVerifySignature(
								hKey.DangerousGetHandle(), 
								((void*)pPaddingInfo), 
								((byte*)pbHashValue), 
								cbHashValue, 
								((byte*)pbSignature), 
								cbSignature, 
								dwFlags
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			if (addRefed)
				hKey.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, NCryptFreeBuffer, [fwd] [return] [Mcg.CodeGen.EnumMarshaller] PInvoke_NCrypt_SECURITY_STATUS__PInvoke_NCrypt__NCrypt_SECURITY_STATUS__PInvoke_NCrypt, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] void___ptrvoid *, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("PInvoke.NCrypt, Version=0.3.0.0, Culture=neutral, PublicKeyToken=9e300f9f87f04a7a", "PInvoke.NCrypt", "NCryptFreeBuffer")]
		public static global::PInvoke.NCrypt_SECURITY_STATUS__PInvoke_NCrypt NCryptFreeBuffer(void* pvInput)
		{
			// Setup
			global::PInvoke.NCrypt_SECURITY_STATUS__PInvoke_NCrypt unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.NCrypt_PInvokes.NCryptFreeBuffer(((void*)pvInput));
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, NCryptFreeObject, [fwd] [return] [Mcg.CodeGen.EnumMarshaller] PInvoke_NCrypt_SECURITY_STATUS__PInvoke_NCrypt__NCrypt_SECURITY_STATUS__PInvoke_NCrypt, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("PInvoke.NCrypt, Version=0.3.0.0, Culture=neutral, PublicKeyToken=9e300f9f87f04a7a", "PInvoke.NCrypt", "NCryptFreeObject")]
		public static global::PInvoke.NCrypt_SECURITY_STATUS__PInvoke_NCrypt NCryptFreeObject(global::System.IntPtr hObject)
		{
			// Setup
			global::PInvoke.NCrypt_SECURITY_STATUS__PInvoke_NCrypt unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.NCrypt_PInvokes.NCryptFreeObject(hObject);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}
	}

	/// <summary>
	/// P/Invoke class for module 'kernel32.dll'
	/// </summary>
	public unsafe static partial class kernel32_dll
	{
		// Signature, GetCurrentProcessId, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.Azure.Amqp, Version=2.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "Win32", "GetCurrentProcessId")]
		public static int GetCurrentProcessId()
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.kernel32_dll_PInvokes.GetCurrentProcessId();
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}
	}

	/// <summary>
	/// P/Invoke class for module '[MRT]'
	/// </summary>
	public unsafe static partial class _MRT_
	{
		// Signature, RhWaitForPendingFinalizers, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Runtime.RuntimeImports", "RhWaitForPendingFinalizers")]
		public static void RhWaitForPendingFinalizers(int allowReentrantWait)
		{
			// Marshalling
			// Call to native method
			global::McgInterop._MRT__PInvokes.RhWaitForPendingFinalizers(allowReentrantWait);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, RhCompatibleReentrantWaitAny, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr___ptr__w64 int *, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Runtime.RuntimeImports", "RhCompatibleReentrantWaitAny")]
		public static int RhCompatibleReentrantWaitAny(
					int alertable, 
					int timeout, 
					int count, 
					global::System.IntPtr* handles)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop._MRT__PInvokes.RhCompatibleReentrantWaitAny(
								alertable, 
								timeout, 
								count, 
								((global::System.IntPtr*)handles)
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, _ecvt_s, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] byte___ptrunsigned char *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int___ptrint *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int___ptrint *, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Runtime.RuntimeImports", "_ecvt_s")]
		public static void _ecvt_s(
					byte* buffer, 
					int sizeInBytes, 
					double value, 
					int count, 
					int* dec, 
					int* sign)
		{
			// Marshalling
			// Call to native method
			global::McgInterop._MRT__PInvokes._ecvt_s(
								((byte*)buffer), 
								sizeInBytes, 
								value, 
								count, 
								((int*)dec), 
								((int*)sign)
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, memmove, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] byte___ptrunsigned char *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] byte___ptrunsigned char *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] uint__unsigned int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Runtime.RuntimeImports", "memmove")]
		public static void memmove(
					byte* dmem, 
					byte* smem, 
					uint size)
		{
			// Marshalling
			// Call to native method
			global::McgInterop._MRT__PInvokes.memmove(
								((byte*)dmem), 
								((byte*)smem), 
								size
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}
	}

	/// <summary>
	/// P/Invoke class for module '*'
	/// </summary>
	public unsafe static partial class _
	{
		// Signature, CallingConventionConverter_GetStubs, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Private.TypeLoader, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Internal.Runtime.TypeLoader.CallConverterThunk", "CallingConventionConverter_GetStubs")]
		public static void CallingConventionConverter_GetStubs(
					out global::System.IntPtr returnVoidStub, 
					out global::System.IntPtr returnIntegerStub, 
					out global::System.IntPtr commonStub)
		{
			// Setup
			global::System.IntPtr unsafe_returnVoidStub;
			global::System.IntPtr unsafe_returnIntegerStub;
			global::System.IntPtr unsafe_commonStub;
			// Marshalling
			// Call to native method
			global::McgInterop.__PInvokes.CallingConventionConverter_GetStubs(
								&(unsafe_returnVoidStub), 
								&(unsafe_returnIntegerStub), 
								&(unsafe_commonStub)
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			commonStub = unsafe_commonStub;
			returnIntegerStub = unsafe_returnIntegerStub;
			returnVoidStub = unsafe_returnVoidStub;
			// Return
		}

		// Signature, CallingConventionConverter_SpecifyCommonStubData, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Private.TypeLoader, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Internal.Runtime.TypeLoader.CallConverterThunk", "CallingConventionConverter_SpecifyCommonStubData")]
		public static void CallingConventionConverter_SpecifyCommonStubData(global::System.IntPtr commonStubData)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.__PInvokes.CallingConventionConverter_SpecifyCommonStubData(commonStubData);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}
	}

	/// <summary>
	/// P/Invoke class for module 'api-ms-win-core-errorhandling-l1-1-0.dll'
	/// </summary>
	public unsafe static partial class api_ms_win_core_errorhandling_l1_1_0_dll
	{
		// Signature, GetLastError, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Runtime.Extensions, Version=4.0.10.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+mincore", "GetLastError")]
		public static int GetLastError()
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.api_ms_win_core_errorhandling_l1_1_0_dll_PInvokes.GetLastError();
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}
	}

	/// <summary>
	/// P/Invoke class for module 'api-ms-win-core-winrt-l1-1-0.dll'
	/// </summary>
	public unsafe static partial class api_ms_win_core_winrt_l1_1_0_dll
	{
		// Signature, RoInitialize, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] uint__unsigned int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Private.WinRTInterop.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089", "mincore+mincore_PInvokes", "RoInitialize")]
		public static int RoInitialize(uint initType)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.api_ms_win_core_winrt_l1_1_0_dll_PInvokes.RoInitialize(initType);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}
	}

	/// <summary>
	/// P/Invoke class for module 'api-ms-win-core-winrt-robuffer-l1-1-0.dll'
	/// </summary>
	public unsafe static partial class api_ms_win_core_winrt_robuffer_l1_1_0_dll
	{
		// Signature, RoGetBufferMarshaler, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.ComInterfaceMarshaller] System_Runtime_InteropServices_IMarshal__System_Runtime_WindowsRuntime__System_Runtime_InteropServices__IMarshal__System_Runtime_WindowsRuntime *, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Runtime.WindowsRuntime, Version=4.0.10.0, Culture=neutral, PublicKeyToken=b77a5c561934e089", "Interop+mincore_PInvokes", "RoGetBufferMarshaler")]
		public static int RoGetBufferMarshaler(out global::System.Runtime.InteropServices.IMarshal__System_Runtime_WindowsRuntime bufferMarshalerPtr)
		{
			// Setup
			global::System.Runtime.InteropServices.IMarshal__System_Runtime_WindowsRuntime__Impl.Vtbl** unsafe_bufferMarshalerPtr = default(global::System.Runtime.InteropServices.IMarshal__System_Runtime_WindowsRuntime__Impl.Vtbl**);
			int unsafe___value;
			try
			{
				// Marshalling
				unsafe_bufferMarshalerPtr = null;
				// Call to native method
				unsafe___value = global::McgInterop.api_ms_win_core_winrt_robuffer_l1_1_0_dll_PInvokes.RoGetBufferMarshaler(&(unsafe_bufferMarshalerPtr));
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				bufferMarshalerPtr = (global::System.Runtime.InteropServices.IMarshal__System_Runtime_WindowsRuntime)global::System.Runtime.InteropServices.McgModuleManager.ComInterfaceToObject(
									((global::System.IntPtr)unsafe_bufferMarshalerPtr), 
									global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("System.Runtime.InteropServices.IMarshal,System.Runtime.WindowsRuntime, Version=4.0.10.0, Culture=neutral, Public" +
											"KeyToken=b77a5c561934e089")
								);
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.McgMarshal.ComSafeRelease(new global::System.IntPtr(((void*)unsafe_bufferMarshalerPtr)));
			}
		}
	}

	/// <summary>
	/// P/Invoke class for module 'api-ms-win-core-com-l1-1-0.dll'
	/// </summary>
	public unsafe static partial class api_ms_win_core_com_l1_1_0_dll
	{
		// Signature, CoCreateInstance, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] byte___ptrunsigned char *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] byte___ptrunsigned char *, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Private.StackTraceGenerator, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Internal.StackTraceGenerator.StackTraceGenerator", "CoCreateInstance")]
		public static int CoCreateInstance(
					byte* rclsid, 
					global::System.IntPtr pUnkOuter, 
					int dwClsContext, 
					byte* riid, 
					out global::System.IntPtr ppv)
		{
			// Setup
			global::System.IntPtr unsafe_ppv;
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.api_ms_win_core_com_l1_1_0_dll_PInvokes.CoCreateInstance(
								((byte*)rclsid), 
								pUnkOuter, 
								dwClsContext, 
								((byte*)riid), 
								&(unsafe_ppv)
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			ppv = unsafe_ppv;
			// Return
			return unsafe___value;
		}
	}

	/// <summary>
	/// P/Invoke class for module 'OleAut32'
	/// </summary>
	public unsafe static partial class OleAut32
	{
		// Signature, SysFreeString, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Private.StackTraceGenerator, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Internal.LightweightInterop.MarshalExtensions", "SysFreeString")]
		public static void SysFreeString(global::System.IntPtr bstr)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OleAut32_PInvokes.SysFreeString(bstr);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}
	}

	public unsafe static partial class BCrypt_PInvokes
	{
		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("bcrypt.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::PInvoke.NTSTATUS__PInvoke_Windows_Core BCryptEnumAlgorithms(
					global::PInvoke.BCrypt_AlgorithmOperations__PInvoke_BCrypt dwAlgOperations, 
					int* pAlgCount, 
					global::PInvoke.BCrypt_BCRYPT_ALGORITHM_IDENTIFIER__PInvoke_BCrypt** ppAlgList, 
					global::PInvoke.BCrypt_BCryptEnumAlgorithmsFlags__PInvoke_BCrypt dwFlags);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("bcrypt.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::PInvoke.NTSTATUS__PInvoke_Windows_Core BCryptOpenAlgorithmProvider(
					global::System.IntPtr* phAlgorithm, 
					ushort* pszAlgId, 
					ushort* pszImplementation, 
					global::PInvoke.BCrypt_BCryptOpenAlgorithmProviderFlags__PInvoke_BCrypt dwFlags);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("bcrypt.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::PInvoke.NTSTATUS__PInvoke_Windows_Core BCryptCreateHash(
					global::System.IntPtr hAlgorithm, 
					global::System.IntPtr* phHash, 
					byte* pbHashObject, 
					int cbHashObject, 
					byte* pbSecret, 
					int cbSecret, 
					global::PInvoke.BCrypt_BCryptCreateHashFlags__PInvoke_BCrypt dwFlags);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("bcrypt.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::PInvoke.NTSTATUS__PInvoke_Windows_Core BCryptEncrypt(
					global::System.IntPtr hKey, 
					byte* pbInput, 
					int cbInput, 
					void* pPaddingInfo, 
					byte* pbIV, 
					int cbIV, 
					byte* pbOutput, 
					int cbOutput, 
					int* pcbResult, 
					global::PInvoke.BCrypt_BCryptEncryptFlags__PInvoke_BCrypt dwFlags);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("bcrypt.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::PInvoke.NTSTATUS__PInvoke_Windows_Core BCryptDecrypt(
					global::System.IntPtr hKey, 
					byte* pbInput, 
					int cbInput, 
					void* pPaddingInfo, 
					byte* pbIV, 
					int cbIV, 
					byte* pbOutput, 
					int cbOutput, 
					int* pcbResult, 
					global::PInvoke.BCrypt_BCryptEncryptFlags__PInvoke_BCrypt dwFlags);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("bcrypt.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::PInvoke.NTSTATUS__PInvoke_Windows_Core BCryptHashData(
					global::System.IntPtr hHash, 
					byte* pbInput, 
					int cbInput, 
					global::PInvoke.BCrypt_BCryptHashDataFlags__PInvoke_BCrypt dwFlags);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("bcrypt.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::PInvoke.NTSTATUS__PInvoke_Windows_Core BCryptFinishHash(
					global::System.IntPtr hHash, 
					byte* pbOutput, 
					int cbOutput, 
					global::PInvoke.BCrypt_BCryptFinishHashFlags__PInvoke_BCrypt dwFlags);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("bcrypt.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::PInvoke.NTSTATUS__PInvoke_Windows_Core BCryptSignHash(
					global::System.IntPtr hKey, 
					void* pPaddingInfo, 
					byte* pbInput, 
					int cbInput, 
					byte* pbOutput, 
					int cbOutput, 
					int* pcbResult, 
					global::PInvoke.BCrypt_BCryptSignHashFlags__PInvoke_BCrypt dwFlags);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("bcrypt.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::PInvoke.NTSTATUS__PInvoke_Windows_Core BCryptVerifySignature(
					global::System.IntPtr hKey, 
					void* pPaddingInfo, 
					byte* pbHash, 
					int cbHash, 
					byte* pbSignature, 
					int cbSignature, 
					global::PInvoke.BCrypt_BCryptSignHashFlags__PInvoke_BCrypt dwFlags);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("bcrypt.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::PInvoke.NTSTATUS__PInvoke_Windows_Core BCryptGenerateKeyPair(
					global::System.IntPtr hAlgorithm, 
					global::System.IntPtr* phKey, 
					int dwLength, 
					global::PInvoke.BCrypt_BCryptGenerateKeyPairFlags__PInvoke_BCrypt dwFlags);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("bcrypt.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::PInvoke.NTSTATUS__PInvoke_Windows_Core BCryptGenerateSymmetricKey(
					global::System.IntPtr hAlgorithm, 
					global::System.IntPtr* phKey, 
					byte* pbKeyObject, 
					int cbKeyObject, 
					byte* pbSecret, 
					int cbSecret, 
					global::PInvoke.BCrypt_BCryptGenerateSymmetricKeyFlags__PInvoke_BCrypt flags);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("bcrypt.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::PInvoke.NTSTATUS__PInvoke_Windows_Core BCryptFinalizeKeyPair(
					global::System.IntPtr hKey, 
					global::PInvoke.BCrypt_BCryptFinalizeKeyPairFlags__PInvoke_BCrypt dwFlags);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("bcrypt.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::PInvoke.NTSTATUS__PInvoke_Windows_Core BCryptImportKey(
					global::System.IntPtr hAlgorithm, 
					global::System.IntPtr hImportKey, 
					ushort* pszBlobType, 
					global::System.IntPtr* phKey, 
					byte* pbKeyObject, 
					int cbKeyObject, 
					byte* pbInput, 
					int cbInput, 
					global::PInvoke.BCrypt_BCryptImportKeyFlags__PInvoke_BCrypt dwFlags);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("bcrypt.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::PInvoke.NTSTATUS__PInvoke_Windows_Core BCryptImportKeyPair(
					global::System.IntPtr hAlgorithm, 
					global::System.IntPtr hImportKey, 
					ushort* pszBlobType, 
					global::System.IntPtr* phKey, 
					byte* pbInput, 
					int cbInput, 
					global::PInvoke.BCrypt_BCryptImportKeyPairFlags__PInvoke_BCrypt dwFlags);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("bcrypt.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::PInvoke.NTSTATUS__PInvoke_Windows_Core BCryptExportKey(
					global::System.IntPtr hKey, 
					global::System.IntPtr hExportKey, 
					ushort* pszBlobType, 
					byte* pbOutput, 
					int cbOutput, 
					int* pcbResult, 
					global::PInvoke.BCrypt_BCryptExportKeyFlags__PInvoke_BCrypt dwFlags);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("bcrypt.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::PInvoke.NTSTATUS__PInvoke_Windows_Core BCryptSecretAgreement(
					global::System.IntPtr privateKey, 
					global::System.IntPtr publicKey, 
					global::System.IntPtr* secret, 
					global::PInvoke.BCrypt_BCryptSecretAgreementFlags__PInvoke_BCrypt flags);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("bcrypt.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::PInvoke.NTSTATUS__PInvoke_Windows_Core BCryptDeriveKey(
					global::System.IntPtr sharedSecret, 
					ushort* keyDerivationFunction, 
					global::PInvoke.BCrypt_BCryptBufferDesc__PInvoke_BCrypt* kdfParameters, 
					byte* derivedKey, 
					int derivedKeySize, 
					int* resultSize, 
					global::PInvoke.BCrypt_BCryptDeriveKeyFlags__PInvoke_BCrypt flags);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("bcrypt.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::PInvoke.NTSTATUS__PInvoke_Windows_Core BCryptSetProperty(
					global::System.IntPtr hObject, 
					ushort* pszProperty, 
					byte* pbInput, 
					int cbInput, 
					global::PInvoke.BCrypt_BCryptSetPropertyFlags__PInvoke_BCrypt dwFlags);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("bcrypt.dll", EntryPoint="BCryptSetProperty", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::PInvoke.NTSTATUS__PInvoke_Windows_Core BCryptSetProperty__0(
					global::System.IntPtr hObject, 
					ushort* pszProperty, 
					ushort* pbInput, 
					int cbInput, 
					global::PInvoke.BCrypt_BCryptSetPropertyFlags__PInvoke_BCrypt dwFlags);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("bcrypt.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::PInvoke.NTSTATUS__PInvoke_Windows_Core BCryptGetProperty(
					global::System.IntPtr hObject, 
					ushort* property, 
					byte* output, 
					int outputSize, 
					int* resultSize, 
					global::PInvoke.BCrypt_BCryptGetPropertyFlags__PInvoke_BCrypt flags);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("bcrypt.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::PInvoke.NTSTATUS__PInvoke_Windows_Core BCryptGenRandom(
					global::System.IntPtr hAlgorithm, 
					byte* pbBuffer, 
					int cbBuffer, 
					global::PInvoke.BCrypt_BCryptGenRandomFlags__PInvoke_BCrypt flags);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("bcrypt.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static void BCryptFreeBuffer(void* pvBuffer);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("bcrypt.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::PInvoke.NTSTATUS__PInvoke_Windows_Core BCryptCloseAlgorithmProvider(
					global::System.IntPtr algorithmHandle, 
					global::PInvoke.BCrypt_BCryptCloseAlgorithmProviderFlags__PInvoke_BCrypt flags);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("bcrypt.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::PInvoke.NTSTATUS__PInvoke_Windows_Core BCryptDestroyHash(global::System.IntPtr hHash);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("bcrypt.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::PInvoke.NTSTATUS__PInvoke_Windows_Core BCryptDestroyKey(global::System.IntPtr hKey);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("bcrypt.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::PInvoke.NTSTATUS__PInvoke_Windows_Core BCryptDestroySecret(global::System.IntPtr hSecret);
	}

	public unsafe static partial class api_ms_win_core_file_l1_2_0_dll_PInvokes
	{
		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("api-ms-win-core-file-l1-2-1.dll", EntryPoint="FindFirstFileExA", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System.IntPtr FindFirstFileEx(
					byte* lpFileName, 
					global::PInvoke.Kernel32_FINDEX_INFO_LEVELS__PInvoke_Kernel32 fInfoLevelId, 
					global::PInvoke.Kernel32_WIN32_FIND_DATA__PInvoke_Kernel32__Impl.UnsafeType* lpFindFileData, 
					global::PInvoke.Kernel32_FINDEX_SEARCH_OPS__PInvoke_Kernel32 fSearchOp, 
					void* lpSearchFilter, 
					global::PInvoke.Kernel32_FindFirstFileExFlags__PInvoke_Kernel32 dwAdditionalFlags);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("api-ms-win-core-file-l1-2-1.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int ReadFile(
					global::System.IntPtr hFile, 
					void* lpBuffer, 
					int nNumberOfBytesToRead, 
					int* lpNumberOfBytesRead, 
					global::PInvoke.Kernel32_OVERLAPPED__PInvoke_Kernel32* lpOverlapped);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("api-ms-win-core-file-l1-2-1.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int WriteFile(
					global::System.IntPtr hFile, 
					void* lpBuffer, 
					int nNumberOfBytesToWrite, 
					int* lpNumberOfBytesWritten, 
					global::PInvoke.Kernel32_OVERLAPPED__PInvoke_Kernel32* lpOverlapped);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("api-ms-win-core-file-l1-2-1.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int FlushFileBuffers(global::System.IntPtr hFile);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("api-ms-win-core-file-l1-2-1.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int FindClose(global::System.IntPtr hFindFile);
	}

	public unsafe static partial class api_ms_win_core_localization_l1_2_0_dll_PInvokes
	{
		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("api-ms-win-core-localization-l1-2-1.dll", EntryPoint="FormatMessageW", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int FormatMessage(
					global::PInvoke.Kernel32_FormatMessageFlags__PInvoke_Kernel32 dwFlags, 
					void* lpSource, 
					int dwMessageId, 
					int dwLanguageId, 
					ushort* lpBuffer, 
					int nSize, 
					global::System.IntPtr* Arguments);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("api-ms-win-core-localization-l1-2-1.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int IsValidLocaleName(ushort* lpLocaleName);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("api-ms-win-core-localization-l1-2-1.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int ResolveLocaleName(
					ushort* lpNameToResolve, 
					ushort* lpLocaleName, 
					int cchLocaleName);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("api-ms-win-core-localization-l1-2-1.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int GetCPInfoExW(
					uint CodePage, 
					uint dwFlags, 
					global::Interop_mincore_CPINFOEXW__System_Text_Encoding_CodePages* lpCPInfoEx);
	}

	public unsafe static partial class api_ms_win_core_processthreads_l1_1_1_dll_PInvokes
	{
		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("api-ms-win-core-processthreads-l1-1-2.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int GetCurrentThreadId();

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("api-ms-win-core-processthreads-l1-1-2.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int GetCurrentProcessId();

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("api-ms-win-core-processthreads-l1-1-2.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System.IntPtr GetCurrentProcess();

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("api-ms-win-core-processthreads-l1-1-2.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int SuspendThread(global::System.IntPtr hThread);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("api-ms-win-core-processthreads-l1-1-2.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int ResumeThread(global::System.IntPtr hThread);
	}

	public unsafe static partial class api_ms_win_core_io_l1_1_1_dll_PInvokes
	{
		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("api-ms-win-core-io-l1-1-1.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int CancelIoEx(
					global::System.IntPtr hFile, 
					global::PInvoke.Kernel32_OVERLAPPED__PInvoke_Kernel32* lpOverlapped);
	}

	public unsafe static partial class api_ms_win_core_synch_l1_2_0_dll_PInvokes
	{
		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("api-ms-win-core-synch-l1-2-0.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::PInvoke.Kernel32_WaitForSingleObjectResult__PInvoke_Kernel32 WaitForSingleObject(
					global::System.IntPtr hHandle, 
					int dwMilliseconds);
	}

	public unsafe static partial class api_ms_win_core_handle_l1_1_0_dll_PInvokes
	{
		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("api-ms-win-core-handle-l1-1-0.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int CloseHandle(global::System.IntPtr hObject);
	}

	public unsafe static partial class NCrypt_PInvokes
	{
		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("ncrypt.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::PInvoke.NCrypt_SECURITY_STATUS__PInvoke_NCrypt NCryptOpenStorageProvider(
					global::System.IntPtr* phProvider, 
					ushort* pszProviderName, 
					global::PInvoke.NCrypt_NCryptOpenStorageProviderFlags__PInvoke_NCrypt dwFlags);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("ncrypt.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::PInvoke.NCrypt_SECURITY_STATUS__PInvoke_NCrypt NCryptCreatePersistedKey(
					global::System.IntPtr hProvider, 
					global::System.IntPtr* phKey, 
					ushort* pszAlgId, 
					ushort* pszKeyName, 
					global::PInvoke.NCrypt_LegacyKeySpec__PInvoke_NCrypt dwLegacyKeySpec, 
					global::PInvoke.NCrypt_NCryptCreatePersistedKeyFlags__PInvoke_NCrypt dwFlags);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("ncrypt.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::PInvoke.NCrypt_SECURITY_STATUS__PInvoke_NCrypt NCryptOpenKey(
					global::System.IntPtr hProvider, 
					global::System.IntPtr* phKey, 
					ushort* pszKeyName, 
					global::PInvoke.NCrypt_LegacyKeySpec__PInvoke_NCrypt dwLegacyKeySpec, 
					global::PInvoke.NCrypt_NCryptOpenKeyFlags__PInvoke_NCrypt dwFlags);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("ncrypt.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::PInvoke.NCrypt_SECURITY_STATUS__PInvoke_NCrypt NCryptDeleteKey(
					global::System.IntPtr hKey, 
					global::PInvoke.NCrypt_NCryptDeleteKeyFlags__PInvoke_NCrypt dwFlags);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("ncrypt.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::PInvoke.NCrypt_SECURITY_STATUS__PInvoke_NCrypt NCryptSecretAgreement(
					global::System.IntPtr hPrivKey, 
					global::System.IntPtr hPubKey, 
					global::System.IntPtr* phSecret, 
					global::PInvoke.NCrypt_NCryptSecretAgreementFlags__PInvoke_NCrypt dwFlags);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("ncrypt.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::PInvoke.NCrypt_SECURITY_STATUS__PInvoke_NCrypt NCryptKeyDerivation(
					global::System.IntPtr hKey, 
					global::PInvoke.NCrypt_NCryptBufferDesc__PInvoke_NCrypt* pParameterList, 
					byte* pbDerivedKey, 
					int cbDerivedKey, 
					int* pcbResult, 
					global::PInvoke.NCrypt_NCryptKeyDerivationFlags__PInvoke_NCrypt dwFlags);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("ncrypt.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::PInvoke.NCrypt_SECURITY_STATUS__PInvoke_NCrypt NCryptDeriveKey(
					global::System.IntPtr hSharedSecret, 
					ushort* pwszKDF, 
					global::PInvoke.NCrypt_NCryptBufferDesc__PInvoke_NCrypt* pParameterList, 
					byte* pbDerivedKey, 
					int cbDerivedKey, 
					int* pcbResult, 
					global::PInvoke.NCrypt_NCryptDeriveKeyFlags__PInvoke_NCrypt dwFlags);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("ncrypt.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::PInvoke.NCrypt_SECURITY_STATUS__PInvoke_NCrypt NCryptEnumAlgorithms(
					global::System.IntPtr hProvider, 
					global::PInvoke.NCrypt_AlgorithmOperations__PInvoke_NCrypt dwAlgOperations, 
					int* pdwAlgCount, 
					global::PInvoke.NCrypt_NCryptAlgorithmName__PInvoke_NCrypt** ppAlgList, 
					global::PInvoke.NCrypt_NCryptEnumAlgorithmsFlags__PInvoke_NCrypt dwFlags);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("ncrypt.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::PInvoke.NCrypt_SECURITY_STATUS__PInvoke_NCrypt NCryptEnumKeys(
					global::System.IntPtr hProvider, 
					ushort* pszScope, 
					global::PInvoke.NCrypt_NCryptKeyName__PInvoke_NCrypt** ppKeyName, 
					void** ppEnumState, 
					global::PInvoke.NCrypt_NCryptEnumKeysFlags__PInvoke_NCrypt dwFlags);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("ncrypt.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::PInvoke.NCrypt_SECURITY_STATUS__PInvoke_NCrypt NCryptIsAlgSupported(
					global::System.IntPtr hProvider, 
					ushort* pszAlgId, 
					global::PInvoke.NCrypt_NCryptIsAlgSupportedFlags__PInvoke_NCrypt dwFlags);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("ncrypt.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::PInvoke.NCrypt_SECURITY_STATUS__PInvoke_NCrypt NCryptFinalizeKey(
					global::System.IntPtr hKey, 
					global::PInvoke.NCrypt_NCryptFinalizeKeyFlags__PInvoke_NCrypt dwFlags);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("ncrypt.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::PInvoke.NCrypt_SECURITY_STATUS__PInvoke_NCrypt NCryptExportKey(
					global::System.IntPtr hKey, 
					global::System.IntPtr hExportKey, 
					ushort* pszBlobType, 
					global::PInvoke.NCrypt_NCryptBufferDesc__PInvoke_NCrypt* pParameterList, 
					byte* pbOutput, 
					int cbOutput, 
					int* pcbResult, 
					global::PInvoke.NCrypt_NCryptExportKeyFlags__PInvoke_NCrypt dwFlags);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("ncrypt.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::PInvoke.NCrypt_SECURITY_STATUS__PInvoke_NCrypt NCryptImportKey(
					global::System.IntPtr hProvider, 
					global::System.IntPtr hImportKey, 
					ushort* pszBlobType, 
					global::PInvoke.NCrypt_NCryptBufferDesc__PInvoke_NCrypt* pParameterList, 
					global::System.IntPtr* phKey, 
					byte* pbData, 
					int cbData, 
					global::PInvoke.NCrypt_NCryptExportKeyFlags__PInvoke_NCrypt dwFlags);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("ncrypt.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::PInvoke.NCrypt_SECURITY_STATUS__PInvoke_NCrypt NCryptGetProperty(
					global::System.IntPtr hObject, 
					ushort* pszProperty, 
					byte* pbOutput, 
					int cbOutput, 
					int* pcbResult, 
					global::PInvoke.NCrypt_NCryptGetPropertyFlags__PInvoke_NCrypt dwFlags);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("ncrypt.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::PInvoke.NCrypt_SECURITY_STATUS__PInvoke_NCrypt NCryptSetProperty(
					global::System.IntPtr hObject, 
					ushort* pszProperty, 
					byte* pbInput, 
					int cbInput, 
					global::PInvoke.NCrypt_NCryptSetPropertyFlags__PInvoke_NCrypt dwFlags);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("ncrypt.dll", EntryPoint="NCryptSetProperty", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::PInvoke.NCrypt_SECURITY_STATUS__PInvoke_NCrypt NCryptSetProperty__0(
					global::System.IntPtr hObject, 
					ushort* pszProperty, 
					ushort* pbInput, 
					int cbInput, 
					global::PInvoke.NCrypt_NCryptSetPropertyFlags__PInvoke_NCrypt dwFlags);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("ncrypt.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::PInvoke.NCrypt_SECURITY_STATUS__PInvoke_NCrypt NCryptEncrypt(
					global::System.IntPtr hKey, 
					byte* pbInput, 
					int cbInput, 
					void* pPaddingInfo, 
					byte* pbOutput, 
					int cbOutput, 
					int* pcbResult, 
					global::PInvoke.NCrypt_NCryptEncryptFlags__PInvoke_NCrypt dwFlags);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("ncrypt.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::PInvoke.NCrypt_SECURITY_STATUS__PInvoke_NCrypt NCryptDecrypt(
					global::System.IntPtr hKey, 
					byte* pbInput, 
					int cbInput, 
					void* pPaddingInfo, 
					byte* pbOutput, 
					int cbOutput, 
					int* pcbResult, 
					global::PInvoke.NCrypt_NCryptEncryptFlags__PInvoke_NCrypt dwFlags);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("ncrypt.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::PInvoke.NCrypt_SECURITY_STATUS__PInvoke_NCrypt NCryptSignHash(
					global::System.IntPtr hKey, 
					void* pPaddingInfo, 
					byte* pbHashValue, 
					int cbHashValue, 
					byte* pbSignature, 
					int cbSignature, 
					int* pcbResult, 
					global::PInvoke.NCrypt_NCryptSignHashFlags__PInvoke_NCrypt dwFlags);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("ncrypt.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::PInvoke.NCrypt_SECURITY_STATUS__PInvoke_NCrypt NCryptVerifySignature(
					global::System.IntPtr hKey, 
					void* pPaddingInfo, 
					byte* pbHashValue, 
					int cbHashValue, 
					byte* pbSignature, 
					int cbSignature, 
					global::PInvoke.NCrypt_NCryptSignHashFlags__PInvoke_NCrypt dwFlags);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("ncrypt.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::PInvoke.NCrypt_SECURITY_STATUS__PInvoke_NCrypt NCryptFreeBuffer(void* pvInput);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("ncrypt.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::PInvoke.NCrypt_SECURITY_STATUS__PInvoke_NCrypt NCryptFreeObject(global::System.IntPtr hObject);
	}

	public unsafe static partial class kernel32_dll_PInvokes
	{
		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("api-ms-win-core-processthreads-l1-1-2.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int GetCurrentProcessId();
	}

	public unsafe static partial class _MRT__PInvokes
	{
		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("[MRT]", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static void RhWaitForPendingFinalizers(int allowReentrantWait);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("[MRT]", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int RhCompatibleReentrantWaitAny(
					int alertable, 
					int timeout, 
					int count, 
					global::System.IntPtr* handles);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("[MRT]", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static void _ecvt_s(
					byte* buffer, 
					int sizeInBytes, 
					double value, 
					int count, 
					int* dec, 
					int* sign);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("[MRT]", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static void memmove(
					byte* dmem, 
					byte* smem, 
					uint size);
	}

	public unsafe static partial class __PInvokes
	{
		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("*", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static void CallingConventionConverter_GetStubs(
					global::System.IntPtr* returnVoidStub, 
					global::System.IntPtr* returnIntegerStub, 
					global::System.IntPtr* commonStub);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("*", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static void CallingConventionConverter_SpecifyCommonStubData(global::System.IntPtr commonStubData);
	}

	public unsafe static partial class api_ms_win_core_errorhandling_l1_1_0_dll_PInvokes
	{
		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("api-ms-win-core-errorhandling-l1-1-1.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int GetLastError();
	}

	public unsafe static partial class api_ms_win_core_winrt_l1_1_0_dll_PInvokes
	{
		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("api-ms-win-core-winrt-l1-1-0.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int RoInitialize(uint initType);
	}

	public unsafe static partial class api_ms_win_core_winrt_robuffer_l1_1_0_dll_PInvokes
	{
		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("api-ms-win-core-winrt-robuffer-l1-1-0.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static int RoGetBufferMarshaler(global::System.Runtime.InteropServices.IMarshal__System_Runtime_WindowsRuntime__Impl.Vtbl*** bufferMarshalerPtr);
	}

	public unsafe static partial class api_ms_win_core_com_l1_1_0_dll_PInvokes
	{
		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("api-ms-win-core-com-l1-1-0.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int CoCreateInstance(
					byte* rclsid, 
					global::System.IntPtr pUnkOuter, 
					int dwClsContext, 
					byte* riid, 
					global::System.IntPtr* ppv);
	}

	public unsafe static partial class OleAut32_PInvokes
	{
		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("oleaut32.dll", EntryPoint="#6", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static void SysFreeString(global::System.IntPtr bstr);
	}
}

